<?xml version="1.0" encoding="utf-8" ?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
<id>http://zeuzoix.github.io/techeuphoria/</id>
<title>A Technical Odyssey</title>
<author>
<name>Conrad Gomes</name>
</author>
<updated>2014-10-30T22:09:19+05:30</updated>
<link href="http://zeuzoix.github.io/techeuphoria/feed.xml" rel="self" type="application/atom+xml" />
<link href="http://zeuzoix.github.io/techeuphoria/" rel="alternate" type="text/html" />
<entry>
<id>http://zeuzoix.github.io/techeuphoria/posts/2014/06/30/a-new-website/</id>
<title>A New Beginning</title>
<updated>2014-10-30T22:09:19+05:30</updated>
<published>2014-06-30T00:00:00+00:00</published>
<link href="http://zeuzoix.github.io/techeuphoria/posts/2014/06/30/a-new-website/" rel="alternate" type="text/html" />
<author>
<name>Conrad Gomes</name>
</author>
<category term="github pages"></category>
<category term="asciidoctor"></category>
<category term="asciidoc"></category>
<category term="awestruct"></category>
<category term="blog"></category>
<category term="website"></category>
<category term="www"></category>
<summary>

Epoch


TechEuphoria was developed during the second quarter of 2014 with the
help of a wonderful slide deck from an open source
advocate Dan Allen(mojavelinux).




Objectives


I had an overall understanding of what I wanted to achieve. It is to build a lean
and clean website, have the ability to be agile and publish with ease and at will.
My objectives took form over the course of my search for a solution as I
became familiar with the different concepts and paradigms of web design and
development. My objectives can now be summarized as follows:




Use a decentrallized tool with which TechEuphoria can be built locally before
publishing it to the...
</summary>
<content type="html">
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;epoch&quot;&gt;
&lt;a class=&quot;anchor&quot; href=&quot;#epoch&quot;&gt;&lt;/a&gt;Epoch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;TechEuphoria was developed during the second quarter of 2014 with the
help of a wonderful &lt;a href=&quot;http://mojavelinux.github.io/decks/docs-workshop/oscon2013/index.html&quot;&gt;slide deck&lt;/a&gt; from an open source
advocate Dan Allen(&lt;a href=&quot;http://www.mojavelinux.com&quot;&gt;mojavelinux&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;objectives&quot;&gt;
&lt;a class=&quot;anchor&quot; href=&quot;#objectives&quot;&gt;&lt;/a&gt;Objectives&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I had an overall understanding of what I wanted to achieve. It is to build a lean
and clean website, have the ability to be agile and publish with ease and at will.
My objectives took form over the course of my search for a solution as I
became familiar with the different concepts and paradigms of web design and
development. My objectives can now be summarized as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Use a decentrallized tool with which TechEuphoria can be built locally before
publishing it to the world wide web.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The tools chosen should have a mechanism with which the presentation of the
website could be separated from the content.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use responsive website design(&lt;a href=&quot;http://en.wikipedia.org/wiki/Responsive_web_design&quot;&gt;RWD&lt;/a&gt;) to
allow users with devices of different displays to consume the content.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;a-journey-of-errors&quot;&gt;
&lt;a class=&quot;anchor&quot; href=&quot;#a-journey-of-errors&quot;&gt;&lt;/a&gt;A Journey of Errors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My objectives were more or less clear. I needed a way to work on my website,
whenever and wherever I wanted to. I knew Git was a good way to achieve
it but I did not know about &lt;a href=&quot;https://pages.github.com&quot;&gt;Github Pages&lt;/a&gt; and started
off with the first choice that came to mind and that was &lt;a href=&quot;http://wordpress.com&quot;&gt;Wordpress&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So begain my pursuit to build TechEuphoria with the objectives given. I initially
figured a way to deploy and manage this website with the help of the following
links:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://davidwinter.me/articles/2012/04/09/install-and-manage-wordpress-with-git/&quot;&gt;Install and manage Wordpress with Git&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://culttt.com/2013/04/08/how-to-deploy-wordpress-themes-with-git&quot;&gt;How to deploy WordPress themes with Git&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://mattbanks.me/wordpress-deployments-with-git&quot;&gt;Managing WordPress Deployments With Git&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.g-design.net/post/60019471157/managing-and-deploying-wordpress-with-git&quot;&gt;Managing and deploying WordPress with Git&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After days of playing around and understanding the details of Wordpress I
realized that it was still difficult to publish and the fact of dumping the
SQL database to a file to sync different copies of the website was a hack
rather than a solution. Despite getting the solution working I abandoned
it completely on the 30th of May. My exploits are stored in the logs of
the following repositories:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/zeuzoix/techeuphoria_wordpress&quot;&gt;GitHub repository&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://bitbucket.org/zeuzoix/techeuphoria_wordpress&quot;&gt;Bitbucket repository&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tools&quot;&gt;
&lt;a class=&quot;anchor&quot; href=&quot;#tools&quot;&gt;&lt;/a&gt;Tools&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following represents the tools that I use to compile and publish this website:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;TechEuphoria content is written in &lt;a href=&quot;http://asciidoc.org&quot;&gt;AsciiDoc&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is transformed by &lt;a href=&quot;http://awestruct.org&quot;&gt;Awestruct&lt;/a&gt; and
&lt;a href=&quot;http://asciidoctor.org&quot;&gt;Asciidoctor&lt;/a&gt; into a static website.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It uses &lt;a href=&quot;https://pages.github.com&quot;&gt;Github Pages&lt;/a&gt; as its publishing engine.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I use &lt;a href=&quot;http://www.vim.org&quot;&gt;Vim&lt;/a&gt; as my text editor to edit everything.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;My development machine is an &lt;a href=&quot;http://www.ubuntu.com&quot;&gt;Ubuntu&lt;/a&gt; guest on an
&lt;a href=&quot;https://www.virtualbox.org&quot;&gt;Oracle Virtual Box&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Happy Blogging!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://zeuzoix.github.io/techeuphoria/posts/2014/01/29/printing-linux-kernel-version/</id>
<title>Printing the Linux kernel version</title>
<updated>2014-10-30T22:09:19+05:30</updated>
<published>2014-01-29T00:00:00+00:00</published>
<link href="http://zeuzoix.github.io/techeuphoria/posts/2014/01/29/printing-linux-kernel-version/" rel="alternate" type="text/html" />
<author>
<name>Conrad Gomes</name>
</author>
<category term="linux"></category>
<category term="kernel"></category>
<category term="programming"></category>
<category term="c"></category>
<summary>

The kernel version that a kernel module is built with can differ from the kernel version it is running on. The version of the kernel that the module is running on is shown
in the first log and the version of the kernel is compiled with is shown
in the second log in the version_init function:



#include &lt;linux/init.h&gt;
#include &lt;linux/module.h&gt;
#include &lt;linux/kernel.h&gt;
#include &lt;linux/utsname.h&gt;
#include &lt;generated/utsrelease.h&gt;

static int __init version_init(void)
{
        int i = 0;

        pr_alert(&quot;Kernel module running of version %s\n&quot;, utsname()-&gt;release);
        pr_alert(&quot;Kernel module compiled with version %s\n&quot;,...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The kernel version that a kernel module is built with can differ from the kernel version it is running on. The version of the kernel that the module is running on is shown
in the first log and the version of the kernel is compiled with is shown
in the second log in the version_init function:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#579&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color:#B44;font-weight:bold&quot;&gt;&amp;lt;linux/init.h&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:#579&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color:#B44;font-weight:bold&quot;&gt;&amp;lt;linux/module.h&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:#579&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color:#B44;font-weight:bold&quot;&gt;&amp;lt;linux/kernel.h&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:#579&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color:#B44;font-weight:bold&quot;&gt;&amp;lt;linux/utsname.h&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:#579&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color:#B44;font-weight:bold&quot;&gt;&amp;lt;generated/utsrelease.h&amp;gt;&lt;/span&gt;

&lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;int&lt;/span&gt; __init version_init(&lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;void&lt;/span&gt;)
{
        &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;int&lt;/span&gt; i = &lt;span style=&quot;color:#00D&quot;&gt;0&lt;/span&gt;;

        pr_alert(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Kernel module running of version %s&lt;/span&gt;&lt;span style=&quot;color:#b0b&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, utsname()-&amp;gt;release);
        pr_alert(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Kernel module compiled with version %s&lt;/span&gt;&lt;span style=&quot;color:#b0b&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, UTS_RELEASE);
        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color:#00D&quot;&gt;0&lt;/span&gt;;
}

&lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;void&lt;/span&gt; __exit version_exit(&lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;void&lt;/span&gt;)
{
        pr_alert(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Over and out!&lt;/span&gt;&lt;span style=&quot;color:#b0b&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
}

module_init(version_init);
module_exit(version_exit);

MODULE_LICENSE(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;GPL&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
MODULE_AUTHOR(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;zeuzoix&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
MODULE_DESCRIPTION(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Kernel Module Version Example Module&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://zeuzoix.github.io/techeuphoria/posts/2014/01/15/caches/</id>
<title>Caches</title>
<updated>2014-10-30T22:09:19+05:30</updated>
<published>2014-01-15T00:00:00+00:00</published>
<link href="http://zeuzoix.github.io/techeuphoria/posts/2014/01/15/caches/" rel="alternate" type="text/html" />
<author>
<name>Conrad Gomes</name>
</author>
<category term="processors"></category>
<category term="programming"></category>
<category term="cache"></category>
<category term="arm"></category>
<category term="cortex"></category>
<summary>

Let&#8217;s talk about the cache and its requirement in a computing system. The word
cache is derived from the french word cacher which means to hide.


In a nutshell it&#8217;s a memory subsystem which improves the speed of execution of
a thread by providing faster access to instructions and data based on their
temporal and spacial characteristics in the program.


With memory there&#8217;s typically a trade off between space and time. If speed is
required then the storage capacity of the memory reduces particularly because
the cost of the memory goes up with speed.


So system designers often incorporate a cache in between the processor and main
memory which...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s talk about the cache and its requirement in a computing system. The word
cache is derived from the french word cacher which means to &lt;em&gt;hide&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a nutshell it&amp;#8217;s a memory subsystem which improves the speed of execution of
a thread by providing faster access to instructions and data based on their
temporal and spacial characteristics in the program.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With memory there&amp;#8217;s typically a trade off between space and time. If speed is
required then the storage capacity of the memory reduces particularly because
the cost of the memory goes up with speed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So system designers often incorporate a cache in between the processor and main
memory which can significantly improve the speed at which memory access occurs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The cache can be of different levels typically most processors these days have
an inbuilt cache termed as L1 which is the smallest memory device in the
hierarchy of memory in the system. Some processors like ARM Cortex&amp;#8217;s A series
have an in built L2 cache also.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are several popular designs for caches. The following videos give a very
nice description of the different types of caches:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://youtu.be/bTj0vFs8ndI&quot; target=&quot;_blank&quot;&gt;Direct Mapped Cache&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://youtu.be/YAz0qJf05ko&quot; target=&quot;_blank&quot;&gt;Associative Cache&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://youtu.be/ReKzEGLlGfk&quot; target=&quot;_blank&quot;&gt;Set Associative Cache&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://zeuzoix.github.io/techeuphoria/posts/2013/12/06/linux-linked-lists/</id>
<title>Linux Linked Lists</title>
<updated>2014-10-30T22:09:19+05:30</updated>
<published>2013-12-06T00:00:00+00:00</published>
<link href="http://zeuzoix.github.io/techeuphoria/posts/2013/12/06/linux-linked-lists/" rel="alternate" type="text/html" />
<author>
<name>Conrad Gomes</name>
</author>
<category term="programming"></category>
<category term="linux"></category>
<category term="c"></category>
<summary>

The linux kernel has a very peculiar implementation of the linked lists data
structure. The linked list is actually a circular linked list. The following
article is useful in understanding more about the design:
http://kernelnewbies.org/FAQ/LinkedLists


What&#8217;s interesting is that the entire implementation is conveniently located
in one header file. This shows that the open source movement when done right
gives you the best solution possible over time:
http://lxr.free-electrons.com/source/include/linux/list.h
...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The linux kernel has a very peculiar implementation of the linked lists data
structure. The linked list is actually a circular linked list. The following
article is useful in understanding more about the design:&lt;br&gt;
&lt;a href=&quot;http://kernelnewbies.org/FAQ/LinkedLists&quot; target=&quot;_blank&quot;&gt;http://kernelnewbies.org/FAQ/LinkedLists&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What&amp;#8217;s interesting is that the entire implementation is conveniently located
in one header file. This shows that the open source movement when done right
gives you the best solution possible over time:&lt;br&gt;
&lt;a href=&quot;http://lxr.free-electrons.com/source/include/linux/list.h&quot; target=&quot;_blank&quot;&gt;http://lxr.free-electrons.com/source/include/linux/list.h&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://zeuzoix.github.io/techeuphoria/posts/2013/09/07/i2c-twi-with-avr-data-transfer/</id>
<title>I2C/TWI with AVR Data Transfer</title>
<updated>2014-10-30T22:09:19+05:30</updated>
<published>2013-09-07T00:00:00+00:00</published>
<link href="http://zeuzoix.github.io/techeuphoria/posts/2013/09/07/i2c-twi-with-avr-data-transfer/" rel="alternate" type="text/html" />
<author>
<name>Conrad Gomes</name>
</author>
<category term="electronics"></category>
<category term="productization"></category>
<category term="i2c"></category>
<summary>

We now take a look at the TWI/I2C API responsible for data transfer. The header file
twi.h has the prototype. We&#8217;ll take a look at the arguments and
their description now:



TWI_RET_E twi_send_recv_buffer(
                           TWI_SEND_RECV_BUFFER_PARAMS_X *px_send_buffer_params,
                           TWI_MODE_E e_mode);



The first argument is a pointer to TWI_SEND_RECV_BUFFER_PARAMS_X defined as follows:



typedef struct _TWI_SEND_RECV_BUFFER_PARAMS_X
{
  ...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We now take a look at the TWI/I2C API responsible for data transfer. The header file
&lt;a href=&quot;https://github.com/zeuzoix/sardine/blob/master/twi.h&quot;&gt;twi.h&lt;/a&gt; has the prototype. We&amp;#8217;ll take a look at the arguments and
their description now:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;c&quot;&gt;TWI_RET_E twi_send_recv_buffer(
                           TWI_SEND_RECV_BUFFER_PARAMS_X *px_send_buffer_params,
                           TWI_MODE_E e_mode);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first argument is a pointer to TWI_SEND_RECV_BUFFER_PARAMS_X defined as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;typedef&lt;/span&gt; &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;struct&lt;/span&gt; _TWI_SEND_RECV_BUFFER_PARAMS_X
{
   uint8_t uc_dev_addr;
   uint8_t uc_dev_id;
   uint8_t *puc_reg_addr;
   uint32_t ui_reg_addr_sz;
   uint8_t *puc_data;
   uint32_t ui_data_sz;

}TWI_SEND_RECV_BUFFER_PARAMS_X;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Where&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;uc_dev_addr&lt;/strong&gt; is the higher nibble of the I2C slave device address&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;uc_dev_id&lt;/strong&gt; is the lower nibble of the I2C slave device address. It is used where the slave address can be configured&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;puc_reg_addr&lt;/strong&gt; is the pointer to the buffer holding the register address of the slave device.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ui_reg_addr_sz&lt;/strong&gt; is the size of the buffer with the register address.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;puc_data&lt;/strong&gt; is the pointer to the data buffer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ui_data_sz&lt;/strong&gt; is the size of the data buffer.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The second argument is an enumeration which indicates if a send or receive operation is to be done&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;typedef&lt;/span&gt; &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;enum&lt;/span&gt; _TWI_STATE_MODE_E
{
   eTWI_MODE_READ = &lt;span style=&quot;color:#00D&quot;&gt;0&lt;/span&gt;,
   eTWI_MODE_WRITE,
   eTWI_MODE_INVALID

}TWI_MODE_E;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://zeuzoix.github.io/techeuphoria/posts/2013/08/31/i2c-twi-with-avr-register-initialization/</id>
<title>I2C/TWI with AVR Register Initialization</title>
<updated>2014-10-30T22:09:19+05:30</updated>
<published>2013-08-31T00:00:00+00:00</published>
<link href="http://zeuzoix.github.io/techeuphoria/posts/2013/08/31/i2c-twi-with-avr-register-initialization/" rel="alternate" type="text/html" />
<author>
<name>Conrad Gomes</name>
</author>
<category term="electronics"></category>
<category term="protocols"></category>
<category term="i2c"></category>
<category term="twi"></category>
<category term="bus"></category>
<summary>

We learned about the different registers available in the Atmel AVR microcontroller to program the TWI interface. In this section we&#8217;ll go through the twi_init API and the initialization of the TWI interface.


The initialization code in the testbench.c initializes the
TWI/I2C library as follows:



x_twi_init_params.e_mode = eTWI_INIT_MODE_16_0000M_100K_1;
x_twi_init_params.pfn_debug = testbench_debug;
e_twi_ret = twi_init(&amp;x_twi_init_params);
if(eTWI_SUCCESS != e_twi_ret)
{
   i_ret = -1;
   goto LBL_INIT_IO_RET;
}



The API twi_init takes a structure variable x_twi_init_params of the type
shown below.  The definition is in twi.h:



typedef struct _TWI_INIT_PARAMS_X
{
   TWI_INIT_MODE_E e_mode;
   TWI_DEBUG_PFN pfn_debug;

}TWI_INIT_PARAMS_X;



The TWI interface can be initialized based on several modes each of which
is given...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We learned about the different registers available in the Atmel AVR microcontroller to program the TWI interface. In this section we&amp;#8217;ll go through the twi_init API and the initialization of the TWI interface.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The initialization code in the &lt;a href=&quot;https://github.com/zeuzoix/sardine/blob/master/testbench.c&quot;&gt;testbench.c&lt;/a&gt; initializes the
TWI/I2C library as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;c&quot;&gt;x_twi_init_params.e_mode = eTWI_INIT_MODE_16_0000M_100K_1;
x_twi_init_params.pfn_debug = testbench_debug;
e_twi_ret = twi_init(&amp;amp;x_twi_init_params);
&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt;(eTWI_SUCCESS != e_twi_ret)
{
   i_ret = -&lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;;
   &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;goto&lt;/span&gt; LBL_INIT_IO_RET;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The API &lt;em&gt;twi_init&lt;/em&gt; takes a structure variable x_twi_init_params of the type
shown below.  The definition is in &lt;a href=&quot;https://github.com/zeuzoix/sardine/blob/master/twi.h&quot;&gt;twi.h&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;typedef&lt;/span&gt; &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;struct&lt;/span&gt; _TWI_INIT_PARAMS_X
{
   TWI_INIT_MODE_E e_mode;
   TWI_DEBUG_PFN pfn_debug;

}TWI_INIT_PARAMS_X;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The TWI interface can be initialized based on several modes each of which
is given an identifier which signifies the CPU clock frequency, SCL clock
speed and the pre-scaler value. For instance in the enumeration definition
below &lt;em&gt;eTWI_INIT_MODE_16_0000M_100K_1&lt;/em&gt; is the mode for a 16.0000MHz
micro-controller, with the desired SCL clock frequency set at 100KHz and
the pre-scaler set to 1.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;typedef&lt;/span&gt; &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;enum&lt;/span&gt; _TWI_INIT_MODE_E
{
   eTWI_INIT_MODE_16_0000M_100K_1 = &lt;span style=&quot;color:#00D&quot;&gt;0&lt;/span&gt;,
   eTWI_INIT_MODE_16_0000M_400K_1,
   eTWI_INIT_MODE_16_0000M_100K_4,
   eTWI_INIT_MODE_16_0000M_400K_4,
   eTWI_INIT_MODE_INVALID

}TWI_INIT_MODE_E;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Internally if we take a look at the twi_init function defined in
&lt;a href=&quot;https://github.com/zeuzoix/sardine/blob/master/twi.c&quot;&gt;twi.c&lt;/a&gt; we see a look up table is employed to initialize the
5 registers TWBR, TWCR, TWSR, TWDR, TWAR. The look up table has the
following structure for each row:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;typedef&lt;/span&gt; &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;struct&lt;/span&gt; _TWI_INIT_REG_X
{
   TWI_INIT_MODE_E e_mode;
   uint8_t uc_twbr;
   uint8_t uc_twcr;
   uint8_t uc_twsr;
   uint8_t uc_twdr;
   uint8_t uc_twar;

}TWI_INIT_REG_X;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The lookup table is a global array gxa_init_reg and is defined as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;static&lt;/span&gt; TWI_INIT_REG_X gxa_init_reg[] =
{
   {
      eTWI_INIT_MODE_16_0000M_100K_1,
      &lt;span style=&quot;color:#02b&quot;&gt;0x48&lt;/span&gt;,                               &lt;span style=&quot;color:#777&quot;&gt;//0b01001000&lt;/span&gt;
      &lt;span style=&quot;color:#02b&quot;&gt;0x80&lt;/span&gt;,                               &lt;span style=&quot;color:#777&quot;&gt;//0b10000000&lt;/span&gt;
      &lt;span style=&quot;color:#02b&quot;&gt;0x00&lt;/span&gt;,                               &lt;span style=&quot;color:#777&quot;&gt;//0b00000000&lt;/span&gt;
      &lt;span style=&quot;color:#02b&quot;&gt;0x00&lt;/span&gt;,                               &lt;span style=&quot;color:#777&quot;&gt;//0b00000000&lt;/span&gt;
      &lt;span style=&quot;color:#02b&quot;&gt;0x00&lt;/span&gt;                                &lt;span style=&quot;color:#777&quot;&gt;//0b00000000&lt;/span&gt;
   }
};&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The code in twi_init cycles through the array gxa_init_reg until it finds
the correct mode and then initializes the 5 registers with the values associated
with the mode.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;for&lt;/span&gt;(uc_i = &lt;span style=&quot;color:#00D&quot;&gt;0&lt;/span&gt; ; uc_i &amp;lt; uc_size_arr ; uc_i++)
{
   &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt;(px_init_params-&amp;gt;e_mode == gxa_init_reg[uc_i].e_mode)
   {
      px_init_reg = &amp;amp;gxa_init_reg[uc_i];
      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;break&lt;/span&gt;;
   }
}

&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt;(&lt;span style=&quot;color:#069&quot;&gt;NULL&lt;/span&gt; == px_init_reg)
{
   &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt;(&lt;span style=&quot;color:#069&quot;&gt;NULL&lt;/span&gt; != px_init_params-&amp;gt;pfn_debug)
   {
      px_init_params-&amp;gt;pfn_debug(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Can't find correct mode&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
   }

   e_ret = eTWI_FAILURE;
   &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;goto&lt;/span&gt; LBL_TWI_INIT_RET;
}

TWBR = px_init_reg-&amp;gt;uc_twbr;
TWCR = px_init_reg-&amp;gt;uc_twcr;
TWSR = px_init_reg-&amp;gt;uc_twsr;
TWDR = px_init_reg-&amp;gt;uc_twdr;
TWAR = px_init_reg-&amp;gt;uc_twar;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the &lt;a href=&quot;http://zeuzoix.github.io/techeuphoria/posts/2013/09/07/i2c-twi-with-avr-data-transfer/&quot;&gt;next&lt;/a&gt; section we&amp;#8217;ll check out transmit
and receive functionality on the TWI/I2C bus with I2C/TWI with AVR Data Transfer.&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://zeuzoix.github.io/techeuphoria/posts/2013/08/29/i2c-twi-with-avr-register-descriptions/</id>
<title>I2C/TWI with AVR Register Descriptions</title>
<updated>2014-10-30T22:09:19+05:30</updated>
<published>2013-08-29T00:00:00+00:00</published>
<link href="http://zeuzoix.github.io/techeuphoria/posts/2013/08/29/i2c-twi-with-avr-register-descriptions/" rel="alternate" type="text/html" />
<author>
<name>Conrad Gomes</name>
</author>
<category term="electronics"></category>
<category term="protocols"></category>
<category term="i2c"></category>
<category term="twi"></category>
<category term="bus"></category>
<summary>



So you want to program the TWI/I2C interface of the AVR. Well you&#8217;ll need to read up about the registers used to control this interface. Though the microcontroller uses two pins SDA and SDC to drive the bus
there is a bunch of registers which are used to control the pins themselves.
Let&#8217;s take a look at them.




TWI Bit Rate Register (TWBR)


This register controls the SCL clock frequency which can either be 100Hz or
400Hz.











The equation to set the correct SCL clock frequency is:













CPUclockfreq is the CPU clock frequency(16MHz in my case).


SCLfreq is the desired SCL clock frequency(100Hz in my case).


TWBR is the...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So you want to program the TWI/I2C interface of the AVR. Well you&amp;#8217;ll need to read up about the registers used to control this interface. Though the microcontroller uses two pins SDA and SDC to drive the bus
there is a bunch of registers which are used to control the pins themselves.
Let&amp;#8217;s take a look at them.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;twi-bit-rate-register-twbr&quot;&gt;
&lt;a class=&quot;anchor&quot; href=&quot;#twi-bit-rate-register-twbr&quot;&gt;&lt;/a&gt;TWI Bit Rate Register (TWBR)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This register controls the SCL clock frequency which can either be 100Hz or
400Hz.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://zeuzoix.github.io/techeuphoria/images/TWI_TWBR.png&quot; alt=&quot;TWI TWBR&quot; width=&quot;640&quot; height=&quot;480&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The equation to set the correct SCL clock frequency is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: left&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://zeuzoix.github.io/techeuphoria/images/svg.latex.svg&quot; alt=&quot;svg.latex&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CPUclockfreq&lt;/strong&gt; is the CPU clock frequency(16MHz in my case).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SCLfreq&lt;/strong&gt; is the desired SCL clock frequency(100Hz in my case).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TWBR&lt;/strong&gt; is the value we store in the register.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TWPS&lt;/strong&gt; is the prescaler bits in the TWI status register TWSR which can take
values from 0 to 3(0 in my case).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;twi-control-register-twcr&quot;&gt;
&lt;a class=&quot;anchor&quot; href=&quot;#twi-control-register-twcr&quot;&gt;&lt;/a&gt;TWI Control Register (TWCR)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This register is used to control the operation of the TWI/I2C interface. Start
or stop a transaction and acknowledge the receipt of a data packet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://zeuzoix.github.io/techeuphoria/images/TWI_TWCR.png&quot; alt=&quot;TWI TWCR&quot; width=&quot;640&quot; height=&quot;480&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bit 7 - TWINT:&lt;/strong&gt; Set when the TWI has finished it&amp;#8217;s task. Also used to initiate
a transaction. This flag is normally cleared by writing a 1 to it. All other
operations to the TWDR and TWAR must be done before this is cleared.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bit 6 - TWEA:&lt;/strong&gt; Controls generation of the acknowledge bit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bit 5 - TWSTA:&lt;/strong&gt; Controls generation of a start bit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bit 4 - TWSTO:&lt;/strong&gt; Controls generation of a stop bit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bit 3 - TWWC:&lt;/strong&gt; This is a read only bit. It is set if you write TWDR when TWINT
is low. It is reset if you write TWDR when TWINT is high.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bit 2 - TWEN:&lt;/strong&gt; This bit enables the TWI/I2C interface&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bit 0 - TWIE:&lt;/strong&gt; This bit in conjunction with the I-bit in SREG enables the
interrupt mode&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;twi-status-register-twsr&quot;&gt;
&lt;a class=&quot;anchor&quot; href=&quot;#twi-status-register-twsr&quot;&gt;&lt;/a&gt;TWI Status Register (TWSR)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After every operation of the TWI interface this register is read to understand the
status of the bus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://zeuzoix.github.io/techeuphoria/images/TWI_TWSR.png&quot; alt=&quot;TWI TWSR&quot; width=&quot;640&quot; height=&quot;480&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bits 7:3 - TWS7:TWS3:&lt;/strong&gt; Status of the last TWI/I2C transaction&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bits 1:0 - TWPS1:TWPS0:&lt;/strong&gt; These are the pre-scaler bits used to modify the SCL frequency.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;twi-data-register-twdr&quot;&gt;
&lt;a class=&quot;anchor&quot; href=&quot;#twi-data-register-twdr&quot;&gt;&lt;/a&gt;TWI Data Register (TWDR)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This register is used to stores the bytes to be transmitted or the bytes received
on the TWI bus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://zeuzoix.github.io/techeuphoria/images/TWI_TWDR.png&quot; alt=&quot;TWI TWDR&quot; width=&quot;640&quot; height=&quot;480&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bits 7:0 - TWD7:TWD0:&lt;/strong&gt; Data byte to be written to the TWI bus or read from the TWI bus.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;twi-address-register-twar&quot;&gt;
&lt;a class=&quot;anchor&quot; href=&quot;#twi-address-register-twar&quot;&gt;&lt;/a&gt;TWI Address Register (TWAR)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This register is loaded with the 7 bit Slave address to which it must respond
to when programmed as a slave or when working in a multiple master mode. In
the multiple master mode the device will compete to be a master and if it senses
that it has lost the arbitration of the line it will have to turn into a slave
and listen for a possible message from another master device.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://zeuzoix.github.io/techeuphoria/images/TWI_TWAR.png&quot; alt=&quot;TWI TWAR&quot; width=&quot;640&quot; height=&quot;480&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bits 7:1 - TWA6: TWA0:&lt;/strong&gt; 7 bit slave address of the TWI interface.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bit 0 - TWGCE:&lt;/strong&gt; Indicates if the device will acknowledge a general call when
sent. A general call is an address to all the slaves connected on the bus. The
Slave address for a general call is usually all 0s.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the &lt;a href=&quot;http://zeuzoix.github.io/techeuphoria/posts/2013/08/31/i2c-twi-with-avr-register-initialization/&quot;&gt;next&lt;/a&gt; section I2C/TWI with AVR
Register Intialization we&amp;#8217;ll go through the initialization code for the TWI/I2C
interface and the values assigned to these registers.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://zeuzoix.github.io/techeuphoria/posts/2013/08/25/i2c-twi-with-avr-introduction/</id>
<title>I2C/TWI with AVR Introduction</title>
<updated>2014-10-30T22:09:19+05:30</updated>
<published>2013-08-25T00:00:00+00:00</published>
<link href="http://zeuzoix.github.io/techeuphoria/posts/2013/08/25/i2c-twi-with-avr-introduction/" rel="alternate" type="text/html" />
<author>
<name>Conrad Gomes</name>
</author>
<category term="electronics"></category>
<category term="protocols"></category>
<category term="i2c"></category>
<category term="twi"></category>
<category term="bus"></category>
<summary>

In this post we&#8217;ll take a look at implementing an I2C/TWI library which can be used with Atmel&#8217;s AVR micro-controller.


The code has been uploaded to GitHub at https://github.com/zeuzoix/sardine and will be
referenced here. The TWI library consists of the following files:




twi.h


twi.c


twi_states.h


twi_states.c


twi_debug.h




There are two API which the application can use to interface with the I2C/TWI
interface. The prototypes are in twi.h



   uint32_t ui_data_sz;

}TWI_SEND_RECV_BUFFER_PARAMS_X;


TWI_RET_E twi_init(TWI_INIT_PARAMS_X *px_init_params);
TWI_RET_E twi_send_recv_buffer(TWI_SEND_RECV_BUFFER_PARAMS_X *px_send_buffer_params,
                               TWI_MODE_E e_mode);

#endif



The first API...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this post we&amp;#8217;ll take a look at implementing an I2C/TWI library which can be used with Atmel&amp;#8217;s AVR micro-controller.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The code has been uploaded to GitHub at &lt;a href=&quot;https://github.com/zeuzoix/sardine&quot; class=&quot;bare&quot;&gt;https://github.com/zeuzoix/sardine&lt;/a&gt; and will be
referenced here. The TWI library consists of the following files:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;twi.h&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;twi.c&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;twi_states.h&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;twi_states.c&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;twi_debug.h&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are two API which the application can use to interface with the I2C/TWI
interface. The prototypes are in twi.h&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;c&quot;&gt;   uint32_t ui_data_sz;

}TWI_SEND_RECV_BUFFER_PARAMS_X;


TWI_RET_E twi_init(TWI_INIT_PARAMS_X *px_init_params);
TWI_RET_E twi_send_recv_buffer(TWI_SEND_RECV_BUFFER_PARAMS_X *px_send_buffer_params,
                               TWI_MODE_E e_mode);

&lt;span style=&quot;color:#579&quot;&gt;#endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first API &lt;em&gt;twi_init&lt;/em&gt; is used to initialize the TWI interface in master
mode by assigning a set of register values to the TWI registers in the AVR Atmel
micro-controller.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The second API &lt;em&gt;twi_send_recv_buffer&lt;/em&gt; is used in both transmit and receive mode
to send and receive data over the TWI SDA data line.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ll take a look at the registers used in the programming of the TWI interface
in the next section i.e.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://zeuzoix.github.io/techeuphoria/posts/2013/08/29/i2c-twi-with-avr-register-descriptions/&quot;&gt;I2C/TWI with AVR Register Descriptions&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://zeuzoix.github.io/techeuphoria/posts/2013/05/23/git/</id>
<title>GIT</title>
<updated>2014-10-30T22:09:19+05:30</updated>
<published>2013-05-23T00:00:00+00:00</published>
<link href="http://zeuzoix.github.io/techeuphoria/posts/2013/05/23/git/" rel="alternate" type="text/html" />
<author>
<name>Conrad Gomes</name>
</author>
<category term="git"></category>
<summary>

I&#8217;ve been a SVN user for quite some time. However it&#8217;s good to understand why GIT has risen in popularity.


GIT was developed by the same team that developed Linux. Key differences as
compared to other version control systems




Distributed: Everyone gets access to the repository on their system unlike
other version control systems which have a central repository on a server.
The main advantage being that even if network access is not available you
can still interact with the version control system.


Snapshots: A version of a file is the snapshot of the file at that point
in time. It is not the sum of all differences....
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve been a SVN user for quite some time. However it&amp;#8217;s good to understand why GIT has risen in popularity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;GIT was developed by the same team that developed Linux. Key differences as
compared to other version control systems&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Distributed: Everyone gets access to the repository on their system unlike
other version control systems which have a central repository on a server.
The main advantage being that even if network access is not available you
can still interact with the version control system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Snapshots: A version of a file is the snapshot of the file at that point
in time. It is not the sum of all differences. Basically the smallest unit
of change is a file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;URLs that I found useful:&lt;br&gt;
Setup: &lt;a href=&quot;https://help.github.com/articles/set-up-git&quot; class=&quot;bare&quot;&gt;https://help.github.com/articles/set-up-git&lt;/a&gt;&lt;br&gt;
Design Basics: &lt;a href=&quot;http://git-scm.com/book/en/Getting-Started-Git-Basics&quot; class=&quot;bare&quot;&gt;http://git-scm.com/book/en/Getting-Started-Git-Basics&lt;/a&gt;&lt;br&gt;
Test Run: &lt;a href=&quot;http://try.github.io/levels/1/challenges/1&quot; class=&quot;bare&quot;&gt;http://try.github.io/levels/1/challenges/1&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://zeuzoix.github.io/techeuphoria/posts/2013/05/18/real-time-clock-with-ds1307-register-map-description/</id>
<title>Real Time Clock with DS1307 - Register Map Description</title>
<updated>2014-10-30T22:09:19+05:30</updated>
<published>2013-05-18T08:18:00+05:30</published>
<link href="http://zeuzoix.github.io/techeuphoria/posts/2013/05/18/real-time-clock-with-ds1307-register-map-description/" rel="alternate" type="text/html" />
<author>
<name>Conrad Gomes</name>
</author>
<category term="electronics"></category>
<category term="productization"></category>
<category term="i2c"></category>
<summary>

In the [first part^] we went through a brief introduction of the
DS1307 chip.
We know the DS1307 can be programmed via the I2C bus i.e SDA and SCL. Through
I2C we should be able to address the registers of this chip and write and read
data based on our application description.


The internal registers which affect the behaviour of the RTC chip are as follows:











The first 7 registers are used to read and write the time and date.
Registers 00h and 01h have more or less the same byte definition and
this is mainly because there are 60 seconds and 60 minutes.


An important difference is bit...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the [first part^] we went through a brief introduction of the
DS1307 chip.&lt;br&gt;
We know the DS1307 can be programmed via the I2C bus i.e SDA and SCL. Through
I2C we should be able to address the registers of this chip and write and read
data based on our application description.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The internal registers which affect the behaviour of the RTC chip are as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://zeuzoix.github.io/techeuphoria/images/DS1307_RegisterMap.png&quot; alt=&quot;DS1307 RegisterMap&quot; width=&quot;640&quot; height=&quot;480&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first 7 registers are used to read and write the time and date.
Registers 00h and 01h have more or less the same byte definition and
this is mainly because there are 60 seconds and 60 minutes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An important difference is bit 7 of register 00h which is the clock halt bit.
By default this bit is set to 1 on power up of the device which disables the
oscillator and RTC functionality of the DS1307.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All values are in binary coded decimal. The range of seconds and minutes goes
from 00 to 59. Therefore for the minutes and seconds we have bits 0 to 3
representing the lower digit i.e. 0 to 9 and bits 4 to 6 representing the
higher digit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The representation of hours can be in the form of either 12 or 24 hour notation.
Bit 6 indicates the notation used. When high the 12 hour notation is used and
bit 5 indicates AM/PM with high being PM. In this case the range of values goes
from 01 to 12. Therefore we have bits 0 to 3 representing the lower digits i.e.
0 to 9 and bit 4 representing the higher digit i.e. 0 or 1.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the 24 hour notation the range of values goes from 00 to 23. Therefore the
lower digit representation remains the same i.e. 0 to 9 represented by bits 0
to 3 but bits 4 and 5 are used to represent the higher digit i.e. 0 to 2.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Essentially the number of bits reserved for each digit is defined by the
range of the value. For instance there are only 7 possible days and so we
have 3 bits representing the day of the week in register 03h. And if we look
at the date register 04h we see the range of values goes from 01 to 31
therefore the lower digit of the date can have a maximum value of 9 so four
bits are reserved whereas the upper digit can have a maximum value of 3
therefore 2 bits are reserved.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Registers 05h and 06h follow the same pattern. Register 07h controls the
behaviour of the square wave out signal. Bit 4 controls the functionality
i.e. whether the pin produces a square wave or a fixed ouput. By default
the value is 0 causing the pin to output a fixed value governed by the
bit 7. If bit 4 is set to 1 the pin produces a square wave whose frequency
is controlled by bits 0 and 1. The number of possible combinations is 4
with 2 bits and therefore the possibilities are 1Hz, 4.096kHz, 8.192kHz
and 32.768kHz.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Registers 08h to 3Fh provide a 56x8 RAM area for use by the application.
For further information please go through the data sheet at:
&lt;a href=&quot;http://datasheets.maximintegrated.com/en/ds/DS1307.pdf&quot; target=&quot;_blank&quot;&gt;ds1307-maximintegrated-pdf&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
</feed>
