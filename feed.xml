<?xml version="1.0" encoding="utf-8" ?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
<id>http://zeuzoix.github.io/techeuphoria/</id>
<title>A Technical Odyssey</title>
<author>
<name>Conrad Gomes</name>
</author>
<updated>2015-01-21T08:52:51+05:30</updated>
<link href="http://zeuzoix.github.io/techeuphoria/feed.xml" rel="self" type="application/atom+xml" />
<link href="http://zeuzoix.github.io/techeuphoria/" rel="alternate" type="text/html" />
<entry>
<id>http://zeuzoix.github.io/techeuphoria/posts/2015/01/20/imx28-sdimage-tool-code-walkthrough/</id>
<title>Understanding The i.MX28 sdimage Utility Code</title>
<updated>2015-01-21T08:52:51+05:30</updated>
<published>2015-01-20T00:00:00+00:00</published>
<link href="http://zeuzoix.github.io/techeuphoria/posts/2015/01/20/imx28-sdimage-tool-code-walkthrough/" rel="alternate" type="text/html" />
<author>
<name>Conrad Gomes</name>
</author>
<category term="sdcard"></category>
<category term="linux"></category>
<category term="i.mx28"></category>
<category term="mmc"></category>
<summary>



The i.MX28 development environment provides a utility like sdimage which is used to flash the bootstream files to the Freescale firmware partitions. In this post we walk through the code of sdimage to understand its implementation




MMC Boot


The instructions to prepare a MMC device for boot are given in the i.MX28
EVK Linux User.s Guide. At the time of writing this post the guide
available from the Freescale website was used and its revision is
Rev. L2.6.35_1.1.0. The document can be obtained from
L2.6.35_1.1.0_LINUX_DOCS.


The steps for MMC boot in section 5.1.3.1 include using sdimage which is
a part of the Linux Target Image Builder (LTIB) development
environment...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The i.MX28 development environment provides a utility like sdimage which is used to flash the bootstream files to the Freescale firmware partitions. In this post we walk through the code of sdimage to understand its implementation&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;mmc-boot&quot;&gt;
&lt;a class=&quot;anchor&quot; href=&quot;#mmc-boot&quot;&gt;&lt;/a&gt;MMC Boot&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The instructions to prepare a MMC device for boot are given in the i.MX28
EVK Linux User.s Guide. At the time of writing this post the guide
available from the Freescale website was used and its revision is
Rev. L2.6.35_1.1.0. The document can be obtained from
&lt;a href=&quot;https://www.freescale.com/webapp/Download?colCode=L2.6.35_1.1.0_LINUX_DOCS&amp;amp;location=null&amp;amp;fasp=1&amp;amp;WT_TYPE=Supporting%20Information&amp;amp;WT_VENDOR=FREESCALE&amp;amp;WT_FILE_FORMAT=gz&amp;amp;WT_ASSET=Documentation&amp;amp;fileExt=.gz&amp;amp;Parent_nodeId=1285002710766722211624&amp;amp;Parent_pageType=product&amp;amp;Parent_nodeId=1285002710766722211624&amp;amp;Parent_pageType=product&quot; target=&quot;_blank&quot;&gt;L2.6.35_1.1.0_LINUX_DOCS&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The steps for MMC boot in section 5.1.3.1 include using sdimage which is
a part of the Linux Target Image Builder (&lt;a href=&quot;http://ltib.org/&quot; target=&quot;_blank&quot;&gt;LTIB&lt;/a&gt;) development
environment to flash the bootstream images onto the MMC device.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This post walks through the steps to extract sdimage from the LTIB,
build it and then goes through the source code for sdimage to understand
what it is doing as it is not very clear.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;getting-the-sdimage-utility-from-ltib&quot;&gt;
&lt;a class=&quot;anchor&quot; href=&quot;#getting-the-sdimage-utility-from-ltib&quot;&gt;&lt;/a&gt;Getting the sdimage utility from LTIB&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To inspect the source code for sdimage we first extract it from the rpm sources
in the LTIB&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;ubuntu@ubuntu-VirtualBox:~/beta/projectX/ltib$./ltib -p uuc.spec -m prep
on't have HTTP::Request::Common
Don't have LWP::UserAgent
Cannot test proxies, or remote file availability without both
HTTP::Request::Common and LWP::UserAgent

Processing: uuc
=================
Build path taken because: build key set, no prebuilt rpm,

rpmbuild --dbpath /home/ubuntu/beta/projectX/ltib/rootfs//var/lib/rpm --target arm --define '_unpackaged_files_terminate_build 0' --define '_target_cpu arm' --define '__strip strip' --define '_topdir /home/ubuntu/beta/projectX/ltib/rpm' --define '_prefix /usr' --define '_tmppath /home/ubuntu/beta/projectX/ltib/tmp' --define '_rpmdir /home/ubuntu/beta/projectX/ltib/rpm/RPMS'  --define '_mandir /usr/share/man' --define '_sysconfdir /etc' --define '_localstatedir /var' -bp  /home/ubuntu/beta/projectX/ltib/dist/lfs-5.1/uuc/uuc.spec
Building target platforms: arm
Building for target arm
Executing(%prep): /bin/sh -e /home/ubuntu/beta/projectX/ltib/tmp/rpm-tmp.79873
+ umask 022
+ cd /home/ubuntu/beta/projectX/ltib/rpm/BUILD
+ cd /home/ubuntu/beta/projectX/ltib/rpm/BUILD
+ rm -rf uuc-10.12.01
+ tar -xvvf -
+ /bin/gzip -dc /home/ubuntu/beta/projectX/ltib/rpm/SOURCES/uuc-10.12.01.tar.gz
drwxrwxr-x root/root         0 2010-09-29 06:35 uuc-10.12.01/
-rw-rw-r-- root/root       338 2010-09-29 06:35 uuc-10.12.01/Makefile
-rwxrwxr-x root/root       337 2010-09-29 06:35 uuc-10.12.01/linuxrc
-rw-rw-r-- root/root      4754 2010-09-29 06:35 uuc-10.12.01/sdimage.c
-rw-rw-r-- root/root     16753 2010-09-29 06:35 uuc-10.12.01/uu.c
+ STATUS=0
+ [ 0 -ne 0 ]
+ cd uuc-10.12.01
+ exit 0
Build time for uuc: 0 seconds

ubuntu@ubuntu-VirtualBox:~/beta/projectX/ltib$&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;building-the-code&quot;&gt;
&lt;a class=&quot;anchor&quot; href=&quot;#building-the-code&quot;&gt;&lt;/a&gt;Building the code&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To build the code for sdimage we go to the rpm directory with the uuc source
code and run &lt;em&gt;gcc&lt;/em&gt; on the &lt;em&gt;sdimage.c&lt;/em&gt; file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;ubuntu@ubuntu-VirtualBox:~/beta/projectX/ltib$ cd rpm/BUILD/uuc-10.12.01/
ubuntu@ubuntu-VirtualBox:~/beta/projectX/ltib/rpm/BUILD/uuc-10.12.01$ gcc sdimage.c -o sdimage
sdimage.c: In function 창in창sdimage.c:134:2: warning: incompatible implicit declaration of built-in function 창mset창enabled by default]
.
.
ubuntu@ubuntu-VirtualBox:~/beta/projectX/ltib/rpm/BUILD/uuc-10.12.01$&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;code-walk-through&quot;&gt;
&lt;a class=&quot;anchor&quot; href=&quot;#code-walk-through&quot;&gt;&lt;/a&gt;Code Walk Through&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Read arguments passed.&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;Filter -f and set the firmware file name to g_firmware.&lt;/p&gt;
&lt;div class=&quot;olist lowerroman&quot;&gt;
&lt;ol class=&quot;lowerroman&quot; type=&quot;i&quot;&gt;
&lt;li&gt;
&lt;p&gt;e.g imx28_linux.sb&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Filter -d and set the device file name to g_filedev.&lt;/p&gt;
&lt;div class=&quot;olist lowerroman&quot;&gt;
&lt;ol class=&quot;lowerroman&quot; type=&quot;i&quot;&gt;
&lt;li&gt;
&lt;p&gt;e.g /dev/sde, /dev/mmcblk&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Crib and return if either of the arguments are not passed&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open the device file and save the handle.&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;Assign device file handle to devhandle.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Crib and return if error in opening the device file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open the firmware file and save the handle.&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;Assign firmware file handle to firmwarehandle.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Crib and return if error in opening the firmware file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get filestat of firmware file&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;Crib and return if error in filestat.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Read the Master Boot Record (MBR) from device handle devhandle into object variable mbr with a structure which matches the MBR structure&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;Crib and return if number of bytes read is less than the size of the MBR structure.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check the signature of the MBR, it should be 0xAA55&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;mbr.sign holds the signature&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Crib and return if signature does not match&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Iterate through the 4 physical partitions and search for a partition type OnTrack DM6 Aux3. (This is the Freescale firmware partition type as given in section 12.11 SD/MMC Boot Mode of i.MX28 Applications Processor Reference Manual, Rev. 2, 08/2013)&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;mbr.part[i].filesystem holds the filesystem type&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Filesystem type is 'S' in ASCII. Hex code 53. Decimal value 83.&lt;/p&gt;
&lt;div class=&quot;olist lowerroman&quot;&gt;
&lt;ol class=&quot;lowerroman&quot; type=&quot;i&quot;&gt;
&lt;li&gt;
&lt;p&gt;To figure out the various filesystem types run fdisk utility. At the command prompt enter 'l' to list partition types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;'S' is hex code 53 which represents Linux partition type which is created when formatting the MMC device with fdisk.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If &quot;OnTrack DM6 Aux3&quot; type of partition is not found then crib and return.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check if the size of the partition is greater than one byte plus two times the firmware file size obtained in step 4&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;Crib and return if less as the partition size is too small.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Partition size has to be slightly greater than twice the firmware file size&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Intialize the ConfigBlock structure variable bcb&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;The config block holds the information about the boot information for the driver. (Further information about its structure is given in section 12.11.1 Boot Control Block (BCB) Data Structure of i.MX28 Applications Processor Reference Manual, Rev. 2, 08/2013)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This structure holds the information about the primary and secondary boot tags.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The bcb structure is initialized with appropriate signature0x00112233.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The primary boot firmware is given a tag of 1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The start of the primary boot firmware is initialized to the next sector after the start of the partition. The bcb structure is stored in the first sector.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The secondary boot firmware is given a tag of 2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The start of the secondary boot firmware is initialized to the next sector after the start of the partition. The bcb structure is stored in the first sector.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write the bcb data&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;Seek to the first sector of the Freescale firmware partition.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write the bcb data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Crib and exit if bytes written does not match with the size of the bcb.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write the primary and secondary firmware partitions&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;Allocate memory of size equal to the firmware file&lt;/p&gt;
&lt;div class=&quot;olist lowerroman&quot;&gt;
&lt;ol class=&quot;lowerroman&quot; type=&quot;i&quot;&gt;
&lt;li&gt;
&lt;p&gt;Crib and exit if there is a memory allocation error.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Read the firmware file from the firmwarehandle to a buffer buff.&lt;/p&gt;
&lt;div class=&quot;olist lowerroman&quot;&gt;
&lt;ol class=&quot;lowerroman&quot; type=&quot;i&quot;&gt;
&lt;li&gt;
&lt;p&gt;Crib and exit if there is a read error&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Seek to the second sector of the Freescale firmware partition.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write the firmware buffer buff to the address seeked above.&lt;/p&gt;
&lt;div class=&quot;olist lowerroman&quot;&gt;
&lt;ol class=&quot;lowerroman&quot; type=&quot;i&quot;&gt;
&lt;li&gt;
&lt;p&gt;Crib and exit if there is a write error&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Seek to the sector after the last sector containing the primary firmware.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write the firmware buffer buff to the address seeked above.&lt;/p&gt;
&lt;div class=&quot;olist lowerroman&quot;&gt;
&lt;ol class=&quot;lowerroman&quot; type=&quot;i&quot;&gt;
&lt;li&gt;
&lt;p&gt;Crib and exit if there is a write error&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Free the buffer allocated&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Close the device handle devhandle.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Close the firmware file handle firmwarehandle.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Exit.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://zeuzoix.github.io/techeuphoria/posts/2014/12/09/sdcard-access-on-ubuntu-guest-on-a-windows-host-with-virtualbox/</id>
<title>SD Card Access on an Ubuntu virtual machine running on a Windows host through VirtualBox</title>
<updated>2015-01-21T08:06:10+05:30</updated>
<published>2014-12-09T00:00:00+00:00</published>
<link href="http://zeuzoix.github.io/techeuphoria/posts/2014/12/09/sdcard-access-on-ubuntu-guest-on-a-windows-host-with-virtualbox/" rel="alternate" type="text/html" />
<author>
<name>Conrad Gomes</name>
</author>
<category term="virtualbox"></category>
<category term="sdcard"></category>
<category term="linux"></category>
<category term="ubuntu"></category>
<category term="virtualization"></category>
<summary>



We will take a look at how to access an SD Card on a Windows Laptop through an Ubuntu VirtualBox virtual machine.


Some of the embedded linux platforms like the
i.MX28 evaluation kit from Freescale have SD
card interfaces with which a firmware image can be flashed and booted up on
the platform.


If you work in an environment where you use Microsoft Windows as your primary
OS you might end up using a Linux environment as a virtual machine on Windows.
For all work involving embedded development for your target board you will
mostly use linux based tools to build code, remote debugging or even flashing
your firmware...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will take a look at how to access an SD Card on a Windows Laptop through an Ubuntu VirtualBox virtual machine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some of the embedded linux platforms like the
&lt;a href=&quot;http://www.freescale.com/webapp/sps/site/prod_summary.jsp?code=MCIMX28EVKJ&quot; target=&quot;_blank&quot;&gt;i.MX28 evaluation kit&lt;/a&gt; from &lt;a href=&quot;http://www.freescale.com&quot;&gt;Freescale&lt;/a&gt; have SD
card interfaces with which a firmware image can be flashed and booted up on
the platform.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you work in an environment where you use Microsoft Windows as your primary
OS you might end up using a Linux environment as a virtual machine on Windows.
For all work involving embedded development for your target board you will
mostly use linux based tools to build code, remote debugging or even flashing
your firmware on some sort of flash based device.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;our-embedded-development-environment&quot;&gt;
&lt;a class=&quot;anchor&quot; href=&quot;#our-embedded-development-environment&quot;&gt;&lt;/a&gt;Our Embedded Development Environment&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have a i.mx28 Evaluation Kit with a SD card interface. The platform supports
booting from firmware flashed on the SD card. In order to access the SD card we
use a linux based tool for the embedded platform. Unfortunately our linux
development machine is a virtual machine of Ubuntu running on
&lt;a href=&quot;https://www.virtualbox.org/&quot; target=&quot;_blank&quot;&gt;Oracle&amp;#8217;s VirtualBox&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The challenge here is to allow the virtual machine running the guest Ubuntu OS to
recognize the SD card interface on the laptop running Windows OS as the host OS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Specifications of the environment:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Host OS&lt;/strong&gt; : Windows 7 Professional&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;VirtualBox&lt;/strong&gt; : Version 4.3.8&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Guest OS&lt;/strong&gt; : Ubuntu 13.04 (GNU/Linux 3.8.0-19-generic i686)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;step-1-accessing-the-command-prompt-on-windows-7&quot;&gt;
&lt;a class=&quot;anchor&quot; href=&quot;#step-1-accessing-the-command-prompt-on-windows-7&quot;&gt;&lt;/a&gt;Step 1: Accessing the command prompt on Windows 7&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ll need to access the command prompt to run VirtualBox&amp;#8217;s &lt;em&gt;VBoxManage&lt;/em&gt; utility.
In order to do so we go to &lt;em&gt;Start&lt;/em&gt; then open &lt;em&gt;Run&lt;/em&gt; and enter &lt;em&gt;cmd&lt;/em&gt; in the text
box provided.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div id=&quot;sdcard-open-command-prompt&quot; class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;../../../../../images/sdcard-open-command-prompt.png&quot;&gt;&lt;img src=&quot;http://zeuzoix.github.io/techeuphoria/images/sdcard-open-command-prompt.png&quot; alt=&quot;sdcard open command prompt&quot; width=&quot;640&quot; height=&quot;480&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Opening the command prompt on Windows 7&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;step-2-determine-the-physical-drive-number-allocated-to-the-sd-card&quot;&gt;
&lt;a class=&quot;anchor&quot; href=&quot;#step-2-determine-the-physical-drive-number-allocated-to-the-sd-card&quot;&gt;&lt;/a&gt;Step 2: Determine the physical drive number allocated to the SD Card&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In our case we work with a micro SD card and have to use an adapter as shown
in the diagram below:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div id=&quot;sdcard-microsd-adaptor-sd&quot; class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;../../../../../images/sdcard-microsd-adaptor-sd.jpg&quot;&gt;&lt;img src=&quot;http://zeuzoix.github.io/techeuphoria/images/sdcard-microsd-adaptor-sd.jpg&quot; alt=&quot;sdcard microsd adaptor sd&quot; width=&quot;640&quot; height=&quot;480&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Micro SD card adapter&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After we have plugged in our SD card we need to know what physical drive number
is allocated to it by the Windows 7 system. This will be used as a parameter to
&lt;em&gt;VBoxManage&lt;/em&gt; when we&amp;#8217;re configuring VirtualBox to use the SD card. We will use
the Windows Management Instrumentation command-line (&lt;a href=&quot;http://technet.microsoft.com/en-us/library/bb742610.aspx&quot; target=&quot;_blank&quot;&gt;WMIC&lt;/a&gt;) tool to determine the
physical drive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The command might require administrator priviledges. After execution we
get to know that our SD card has been allocated a physical drive number of 1.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;C:\Users\Conrad.Gomes&amp;gt;wmic diskdrive list brief /format:list&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div id=&quot;sdcard-list-diskdrives-using-command-prompt&quot; class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;../../../../../images/sdcard-list-diskdrives-using-command-prompt.png&quot;&gt;&lt;img src=&quot;http://zeuzoix.github.io/techeuphoria/images/sdcard-list-diskdrives-using-command-prompt.png&quot; alt=&quot;sdcard list diskdrives using command prompt&quot; width=&quot;640&quot; height=&quot;480&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. Using wmic to get the physical drive number&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;step-3-creating-and-mapping-a-disk-file-to-the-sd-card&quot;&gt;
&lt;a class=&quot;anchor&quot; href=&quot;#step-3-creating-and-mapping-a-disk-file-to-the-sd-card&quot;&gt;&lt;/a&gt;Step 3: Creating and mapping a disk file to the SD Card&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The SD card is treated as a physical disk in the system. We need to create an
image that will represent the entire &quot;raw disk&quot; represented by the SD card.
To do so we will use the &lt;em&gt;VBoxManage&lt;/em&gt; utility available with the VirtualBox
installation. We first change the directory to the VirtualBox installation
path where the &lt;em&gt;VBoxManage&lt;/em&gt; utility exists. Since VirtualBox is now owned by
Oracle it will be installed in the &quot;Oracle&quot; directory in &quot;Program Files&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;C:\Users\Conrad.Gomes&amp;gt;cd &quot;C:\Program Files\Oracle\VirtualBox&quot;

C:\Program Files\Oracle\VirtualBox&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The capture below highlights the result of the above step&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div id=&quot;sdcard-changedirectory-to-virtualbox&quot; class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;../../../../../images/sdcard-changedirectory-to-virtualbox.png&quot;&gt;&lt;img src=&quot;http://zeuzoix.github.io/techeuphoria/images/sdcard-changedirectory-to-virtualbox.png&quot; alt=&quot;sdcard changedirectory to virtualbox&quot; width=&quot;640&quot; height=&quot;480&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. Changing to the Oracle VirtualBox directory&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We should now be able to create the vmdk image mapped to the SD card using
the command below. Two arguments need to be supplied, the absolute path of
the file on the host OS i.e. the Windows7 machine which will map to the SD
card and the raw disk which is expressed as &quot;\\.\PhysicalDriveX&quot; where &quot;X&quot;
is the physical drive number of the SD card that we obtained using &lt;em&gt;wmic&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;C:\Program Files\Oracle\VirtualBox&amp;gt;VBoxManage.exe internalcommands createrawvmdk -filename &quot;D:\Work\SD-Card.vmdk&quot; -rawdisk &quot;\\.\PhysicalDrive1&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If it succeeds you should see a success message as shown in the screen
capture:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div id=&quot;sdcard-vboxmanage-create-rawdisk&quot; class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;../../../../../images/sdcard-vboxmanage-create-rawdisk.png&quot;&gt;&lt;img src=&quot;http://zeuzoix.github.io/techeuphoria/images/sdcard-vboxmanage-create-rawdisk.png&quot; alt=&quot;sdcard vboxmanage create rawdisk&quot; width=&quot;640&quot; height=&quot;480&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 5. Creating VMDK image with VBoxManage and mapping it to the SD card&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;step-4-allowing-the-guest-os-to-access-the-sd-card&quot;&gt;
&lt;a class=&quot;anchor&quot; href=&quot;#step-4-allowing-the-guest-os-to-access-the-sd-card&quot;&gt;&lt;/a&gt;Step 4: Allowing the guest OS to access the SD card&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Make sure the guest OS virtual machine is &quot;Powered Off&quot; before changing
its settings. To modify the settings of the virtual machine we have to
power it off. If not powered off the system will not allow us to add the
hard disk mapped SD-Card.vmdk file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div id=&quot;sdcard-open-virtualbox-settings-when-powered-off&quot; class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;../../../../../images/sdcard-open-virtualbox-settings-when-powered-off.png&quot;&gt;&lt;img src=&quot;http://zeuzoix.github.io/techeuphoria/images/sdcard-open-virtualbox-settings-when-powered-off.png&quot; alt=&quot;sdcard open virtualbox settings when powered off&quot; width=&quot;640&quot; height=&quot;480&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 6. Open VirtualBox settings when VM is powered off&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once powered off go to the settings of the virtual machine
and under the &quot;Controller: SATA&quot; settings click on &quot;Add Hard Disk&quot; button
as shown below:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div id=&quot;sdcard-storage-settings-add-harddisk&quot; class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;../../../../../images/sdcard-storage-settings-add-harddisk.png&quot;&gt;&lt;img src=&quot;http://zeuzoix.github.io/techeuphoria/images/sdcard-storage-settings-add-harddisk.png&quot; alt=&quot;sdcard storage settings add harddisk&quot; width=&quot;640&quot; height=&quot;480&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 7. Modify storage settings and add hard disk under Controller: SATA settings&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Locate the VMDK file created in the previous step and open it to add it as a
hard disk.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div id=&quot;sdcard-storage-settings-choose-sd-cardvmdk&quot; class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;../../../../../images/sdcard-storage-settings-choose-sd-cardvmdk.png&quot;&gt;&lt;img src=&quot;http://zeuzoix.github.io/techeuphoria/images/sdcard-storage-settings-choose-sd-cardvmdk.png&quot; alt=&quot;sdcard storage settings choose sd cardvmdk&quot; width=&quot;640&quot; height=&quot;480&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 8. Select the VMDK file and open it as a hard disk&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once successfully opened we should be able to see the file listed as a hard
disk under &quot;Controller: SATA&quot; as shown below:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div id=&quot;sdcard-storage-sd-card-vmdk-added&quot; class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;../../../../../images/sdcard-storage-sd-card-vmdk-added.png&quot;&gt;&lt;img src=&quot;http://zeuzoix.github.io/techeuphoria/images/sdcard-storage-sd-card-vmdk-added.png&quot; alt=&quot;sdcard storage sd card vmdk added&quot; width=&quot;640&quot; height=&quot;480&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 9. SD-Card.vmdk is listed as a hard disk under Controller:Sata settings&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;step-5-accessing-the-sd-card-on-the-guest-os&quot;&gt;
&lt;a class=&quot;anchor&quot; href=&quot;#step-5-accessing-the-sd-card-on-the-guest-os&quot;&gt;&lt;/a&gt;Step 5: Accessing The SD Card On The Guest OS&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next step is to power on the virtual machine and see the SD card added as a
hard disk in the system. We use &lt;em&gt;fdisk&lt;/em&gt; to check and see if the SD card is
listed in the system. Use of &lt;em&gt;fdisk&lt;/em&gt; may require &lt;em&gt;sudo&lt;/em&gt; privileges.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;ubuntu@ubuntu-VirtualBox:~$ sudo fdisk -l
[sudo] password for ubuntu:&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The SD card is visible as &lt;em&gt;/dev/sde&lt;/em&gt; device in the system. Further more we can
see the various partitions and their file formats. It is the last device listed
by &lt;em&gt;fdisk&lt;/em&gt;. For comparison sake &lt;em&gt;fdisk&lt;/em&gt; can be run before adding the SD card
as explained here and then compared to see the new hard disk device:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div id=&quot;sdcard-guest-os-fdisk-list&quot; class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;../../../../../images/sdcard-guest-os-fdisk-list.png&quot;&gt;&lt;img src=&quot;http://zeuzoix.github.io/techeuphoria/images/sdcard-guest-os-fdisk-list.png&quot; alt=&quot;sdcard guest os fdisk list&quot; width=&quot;640&quot; height=&quot;480&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 10. Listing the newly added SD card using fdisk&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://zeuzoix.github.io/techeuphoria/posts/2014/11/05/apt-cache-show/</id>
<title>Getting information about packages using APT</title>
<updated>2014-12-02T21:43:24+05:30</updated>
<published>2014-11-05T00:00:00+00:00</published>
<link href="http://zeuzoix.github.io/techeuphoria/posts/2014/11/05/apt-cache-show/" rel="alternate" type="text/html" />
<author>
<name>Conrad Gomes</name>
</author>
<category term="linux"></category>
<category term="packages"></category>
<category term="apt"></category>
<summary>

Understanding information about packages before using apt-get


The APT( Advanced Packaging Tool) handles software packages on a debian system.
Typically when you go through any tutorial on installing any package or
application you may encounter instructions to install packages with apt_get.
This step is typically a trivial step that is executed without understanding
the nature and purpose of the packages being installed. The power and simplicity
of APT resolves all the dependencies of the packages.



user@ubuntu-VirtualBox:~/mysite/techeuphoria$ sudo apt-get install build-essential
[sudo] password for user:



However if you want to dig deeper and understand the nature of the packages
getting installed you can use the apt-cache show command as follows:



user@ubuntu-VirtualBox:~/mysite/techeuphoria$ sudo...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Understanding information about packages before using apt-get&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The APT( Advanced Packaging Tool) handles software packages on a debian system.
Typically when you go through any tutorial on installing any package or
application you may encounter instructions to install packages with &lt;em&gt;apt_get&lt;/em&gt;.
This step is typically a trivial step that is executed without understanding
the nature and purpose of the packages being installed. The power and simplicity
of APT resolves all the dependencies of the packages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;user@ubuntu-VirtualBox:~/mysite/techeuphoria$ sudo apt-get install build-essential
[sudo] password for user:&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However if you want to dig deeper and understand the nature of the packages
getting installed you can use the &lt;em&gt;apt-cache show&lt;/em&gt; command as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;user@ubuntu-VirtualBox:~/mysite/techeuphoria$ sudo apt-cache show build-essential
Package: build-essential
Priority: optional
Section: devel
Installed-Size: 37
Maintainer: Ubuntu Developers &amp;lt;ubuntu-devel-discuss@lists.ubuntu.com&amp;gt;
Original-Maintainer: Matthias Klose &amp;lt;doko@debian.org&amp;gt;
Architecture: i386
Version: 11.6ubuntu4
Depends: libc6-dev | libc-dev, gcc (&amp;gt;= 4:4.4.3), g++ (&amp;gt;= 4:4.4.3), make, dpkg-dev (&amp;gt;= 1.13.5)
Filename: pool/main/b/build-essential/build-essential_11.6ubuntu4_i386.deb
Size: 5654
MD5sum: d8bd2f0becd7b941d8e10c75f3e73120
SHA1: 55488e1349c1f49656260dfa8d46dea4f353b3a1
SHA256: 5594116e639130239f849088321f5ff3cc75cd3a688d1d3504786da1195e4d4d
Description-en: Informational list of build-essential packages
 If you do not plan to build Debian packages, you don't need this
 package.  Starting with dpkg (&amp;gt;= 1.14.18) this package is required
 for building Debian packages.
 .
 This package contains an informational list of packages which are
 considered essential for building Debian packages.  This package also
 depends on the packages on that list, to make it easy to have the
 build-essential packages installed.
 .
 If you have this package installed, you only need to install whatever
 a package specifies as its build-time dependencies to build the
 package.  Conversely, if you are determining what your package needs
 to build-depend on, you can always leave out the packages this
 package depends on.
 .
 This package is NOT the definition of what packages are
 build-essential; the real definition is in the Debian Policy Manual.
 This package contains merely an informational list, which is all
 most people need.   However, if this package and the manual disagree,
 the manual is correct.
Description-md5: 90ef0ef86cafda0bd16f746eb621d9da
Bugs: https://bugs.launchpad.net/ubuntu/+filebug
Build-Essential: yes
Origin: Ubuntu
Supported: 9m&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The above command gives you insight into the details of the package along
with dependencies and a description. We check the information for
&lt;em&gt;build-essential&lt;/em&gt; which is not a single package but a list of packages
which are tagged as &lt;em&gt;&quot;Build-Essential: yes&quot;&lt;/em&gt;. The same command can be applied
to any package name listed in your &lt;em&gt;apt-get install&lt;/em&gt; command.&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://zeuzoix.github.io/techeuphoria/posts/2014/06/30/a-new-website/</id>
<title>A New Beginning</title>
<updated>2014-11-05T08:40:50+05:30</updated>
<published>2014-06-30T00:00:00+00:00</published>
<link href="http://zeuzoix.github.io/techeuphoria/posts/2014/06/30/a-new-website/" rel="alternate" type="text/html" />
<author>
<name>Conrad Gomes</name>
</author>
<category term="github pages"></category>
<category term="asciidoctor"></category>
<category term="asciidoc"></category>
<category term="awestruct"></category>
<category term="blog"></category>
<category term="website"></category>
<category term="www"></category>
<summary>

Epoch


TechEuphoria was developed during the second quarter of 2014 with the
help of a wonderful slide deck from an open source
advocate Dan Allen(mojavelinux).




Objectives


I had an overall understanding of what I wanted to achieve. It is to build a lean
and clean website, have the ability to be agile and publish with ease and at will.
My objectives took form over the course of my search for a solution as I
became familiar with the different concepts and paradigms of web design and
development. My objectives can now be summarized as follows:




Use a decentrallized tool with which TechEuphoria can be built locally before
publishing it to the...
</summary>
<content type="html">
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;epoch&quot;&gt;
&lt;a class=&quot;anchor&quot; href=&quot;#epoch&quot;&gt;&lt;/a&gt;Epoch&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;TechEuphoria was developed during the second quarter of 2014 with the
help of a wonderful &lt;a href=&quot;http://mojavelinux.github.io/decks/docs-workshop/oscon2013/index.html&quot;&gt;slide deck&lt;/a&gt; from an open source
advocate Dan Allen(&lt;a href=&quot;http://www.mojavelinux.com&quot;&gt;mojavelinux&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;objectives&quot;&gt;
&lt;a class=&quot;anchor&quot; href=&quot;#objectives&quot;&gt;&lt;/a&gt;Objectives&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I had an overall understanding of what I wanted to achieve. It is to build a lean
and clean website, have the ability to be agile and publish with ease and at will.
My objectives took form over the course of my search for a solution as I
became familiar with the different concepts and paradigms of web design and
development. My objectives can now be summarized as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Use a decentrallized tool with which TechEuphoria can be built locally before
publishing it to the world wide web.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The tools chosen should have a mechanism with which the presentation of the
website could be separated from the content.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use responsive website design(&lt;a href=&quot;http://en.wikipedia.org/wiki/Responsive_web_design&quot;&gt;RWD&lt;/a&gt;) to
allow users with devices of different displays to consume the content.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;a-journey-of-errors&quot;&gt;
&lt;a class=&quot;anchor&quot; href=&quot;#a-journey-of-errors&quot;&gt;&lt;/a&gt;A Journey of Errors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My objectives were more or less clear. I needed a way to work on my website,
whenever and wherever I wanted to. I knew Git was a good way to achieve
it but I did not know about &lt;a href=&quot;https://pages.github.com&quot;&gt;Github Pages&lt;/a&gt; and started
off with the first choice that came to mind and that was &lt;a href=&quot;http://wordpress.com&quot;&gt;Wordpress&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So begain my pursuit to build TechEuphoria with the objectives given. I initially
figured a way to deploy and manage this website with the help of the following
links:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://davidwinter.me/articles/2012/04/09/install-and-manage-wordpress-with-git/&quot;&gt;Install and manage Wordpress with Git&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://culttt.com/2013/04/08/how-to-deploy-wordpress-themes-with-git&quot;&gt;How to deploy WordPress themes with Git&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://mattbanks.me/wordpress-deployments-with-git&quot;&gt;Managing WordPress Deployments With Git&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.g-design.net/post/60019471157/managing-and-deploying-wordpress-with-git&quot;&gt;Managing and deploying WordPress with Git&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After days of playing around and understanding the details of Wordpress I
realized that it was still difficult to publish and the fact of dumping the
SQL database to a file to sync different copies of the website was a hack
rather than a solution. Despite getting the solution working I abandoned
it completely on the 30th of May. My exploits are stored in the logs of
the following repositories:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/zeuzoix/techeuphoria_wordpress&quot;&gt;GitHub repository&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://bitbucket.org/zeuzoix/techeuphoria_wordpress&quot;&gt;Bitbucket repository&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tools&quot;&gt;
&lt;a class=&quot;anchor&quot; href=&quot;#tools&quot;&gt;&lt;/a&gt;Tools&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following represents the tools that I use to compile and publish this website:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;TechEuphoria content is written in &lt;a href=&quot;http://asciidoc.org&quot;&gt;AsciiDoc&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is transformed by &lt;a href=&quot;http://awestruct.org&quot;&gt;Awestruct&lt;/a&gt; and
&lt;a href=&quot;http://asciidoctor.org&quot;&gt;Asciidoctor&lt;/a&gt; into a static website.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It uses &lt;a href=&quot;https://pages.github.com&quot;&gt;Github Pages&lt;/a&gt; as its publishing engine.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I use &lt;a href=&quot;http://www.vim.org&quot;&gt;Vim&lt;/a&gt; as my text editor to edit everything.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;My development machine is an &lt;a href=&quot;http://www.ubuntu.com&quot;&gt;Ubuntu&lt;/a&gt; guest on an
&lt;a href=&quot;https://www.virtualbox.org&quot;&gt;Oracle Virtual Box&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Happy Blogging!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://zeuzoix.github.io/techeuphoria/posts/2014/01/29/printing-linux-kernel-version/</id>
<title>Printing the Linux kernel version</title>
<updated>2014-11-05T08:40:50+05:30</updated>
<published>2014-01-29T00:00:00+00:00</published>
<link href="http://zeuzoix.github.io/techeuphoria/posts/2014/01/29/printing-linux-kernel-version/" rel="alternate" type="text/html" />
<author>
<name>Conrad Gomes</name>
</author>
<category term="linux"></category>
<category term="kernel"></category>
<category term="programming"></category>
<category term="c"></category>
<summary>

The kernel version that a kernel module is built with can differ from the kernel version it is running on. The version of the kernel that the module is running on is shown
in the first log and the version of the kernel is compiled with is shown
in the second log in the version_init function:



#include &lt;linux/init.h&gt;
#include &lt;linux/module.h&gt;
#include &lt;linux/kernel.h&gt;
#include &lt;linux/utsname.h&gt;
#include &lt;generated/utsrelease.h&gt;

static int __init version_init(void)
{
        int i = 0;

        pr_alert(&quot;Kernel module running of version %s\n&quot;, utsname()-&gt;release);
        pr_alert(&quot;Kernel module compiled with version %s\n&quot;,...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The kernel version that a kernel module is built with can differ from the kernel version it is running on. The version of the kernel that the module is running on is shown
in the first log and the version of the kernel is compiled with is shown
in the second log in the version_init function:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#579&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color:#B44;font-weight:bold&quot;&gt;&amp;lt;linux/init.h&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:#579&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color:#B44;font-weight:bold&quot;&gt;&amp;lt;linux/module.h&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:#579&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color:#B44;font-weight:bold&quot;&gt;&amp;lt;linux/kernel.h&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:#579&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color:#B44;font-weight:bold&quot;&gt;&amp;lt;linux/utsname.h&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:#579&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color:#B44;font-weight:bold&quot;&gt;&amp;lt;generated/utsrelease.h&amp;gt;&lt;/span&gt;

&lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;int&lt;/span&gt; __init version_init(&lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;void&lt;/span&gt;)
{
        &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;int&lt;/span&gt; i = &lt;span style=&quot;color:#00D&quot;&gt;0&lt;/span&gt;;

        pr_alert(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Kernel module running of version %s&lt;/span&gt;&lt;span style=&quot;color:#b0b&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, utsname()-&amp;gt;release);
        pr_alert(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Kernel module compiled with version %s&lt;/span&gt;&lt;span style=&quot;color:#b0b&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, UTS_RELEASE);
        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color:#00D&quot;&gt;0&lt;/span&gt;;
}

&lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;void&lt;/span&gt; __exit version_exit(&lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;void&lt;/span&gt;)
{
        pr_alert(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Over and out!&lt;/span&gt;&lt;span style=&quot;color:#b0b&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
}

module_init(version_init);
module_exit(version_exit);

MODULE_LICENSE(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;GPL&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
MODULE_AUTHOR(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;zeuzoix&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
MODULE_DESCRIPTION(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Kernel Module Version Example Module&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://zeuzoix.github.io/techeuphoria/posts/2014/01/15/caches/</id>
<title>Caches</title>
<updated>2014-11-05T08:40:50+05:30</updated>
<published>2014-01-15T00:00:00+00:00</published>
<link href="http://zeuzoix.github.io/techeuphoria/posts/2014/01/15/caches/" rel="alternate" type="text/html" />
<author>
<name>Conrad Gomes</name>
</author>
<category term="processors"></category>
<category term="programming"></category>
<category term="cache"></category>
<category term="arm"></category>
<category term="cortex"></category>
<summary>

Let&#8217;s talk about the cache and its requirement in a computing system. The word
cache is derived from the french word cacher which means to hide.


In a nutshell it&#8217;s a memory subsystem which improves the speed of execution of
a thread by providing faster access to instructions and data based on their
temporal and spacial characteristics in the program.


With memory there&#8217;s typically a trade off between space and time. If speed is
required then the storage capacity of the memory reduces particularly because
the cost of the memory goes up with speed.


So system designers often incorporate a cache in between the processor and main
memory which...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s talk about the cache and its requirement in a computing system. The word
cache is derived from the french word cacher which means to &lt;em&gt;hide&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a nutshell it&amp;#8217;s a memory subsystem which improves the speed of execution of
a thread by providing faster access to instructions and data based on their
temporal and spacial characteristics in the program.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With memory there&amp;#8217;s typically a trade off between space and time. If speed is
required then the storage capacity of the memory reduces particularly because
the cost of the memory goes up with speed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So system designers often incorporate a cache in between the processor and main
memory which can significantly improve the speed at which memory access occurs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The cache can be of different levels typically most processors these days have
an inbuilt cache termed as L1 which is the smallest memory device in the
hierarchy of memory in the system. Some processors like ARM Cortex&amp;#8217;s A series
have an in built L2 cache also.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are several popular designs for caches. The following videos give a very
nice description of the different types of caches:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://youtu.be/bTj0vFs8ndI&quot; target=&quot;_blank&quot;&gt;Direct Mapped Cache&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://youtu.be/YAz0qJf05ko&quot; target=&quot;_blank&quot;&gt;Associative Cache&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://youtu.be/ReKzEGLlGfk&quot; target=&quot;_blank&quot;&gt;Set Associative Cache&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://zeuzoix.github.io/techeuphoria/posts/2013/12/06/linux-linked-lists/</id>
<title>Linux Linked Lists</title>
<updated>2014-11-05T08:40:50+05:30</updated>
<published>2013-12-06T00:00:00+00:00</published>
<link href="http://zeuzoix.github.io/techeuphoria/posts/2013/12/06/linux-linked-lists/" rel="alternate" type="text/html" />
<author>
<name>Conrad Gomes</name>
</author>
<category term="programming"></category>
<category term="linux"></category>
<category term="c"></category>
<summary>

The linux kernel has a very peculiar implementation of the linked lists data
structure. The linked list is actually a circular linked list. The following
article is useful in understanding more about the design:
http://kernelnewbies.org/FAQ/LinkedLists


What&#8217;s interesting is that the entire implementation is conveniently located
in one header file. This shows that the open source movement when done right
gives you the best solution possible over time:
http://lxr.free-electrons.com/source/include/linux/list.h
...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The linux kernel has a very peculiar implementation of the linked lists data
structure. The linked list is actually a circular linked list. The following
article is useful in understanding more about the design:&lt;br&gt;
&lt;a href=&quot;http://kernelnewbies.org/FAQ/LinkedLists&quot; target=&quot;_blank&quot;&gt;http://kernelnewbies.org/FAQ/LinkedLists&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What&amp;#8217;s interesting is that the entire implementation is conveniently located
in one header file. This shows that the open source movement when done right
gives you the best solution possible over time:&lt;br&gt;
&lt;a href=&quot;http://lxr.free-electrons.com/source/include/linux/list.h&quot; target=&quot;_blank&quot;&gt;http://lxr.free-electrons.com/source/include/linux/list.h&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://zeuzoix.github.io/techeuphoria/posts/2013/09/07/i2c-twi-with-avr-data-transfer/</id>
<title>I2C/TWI with AVR Data Transfer</title>
<updated>2014-11-05T08:40:50+05:30</updated>
<published>2013-09-07T00:00:00+00:00</published>
<link href="http://zeuzoix.github.io/techeuphoria/posts/2013/09/07/i2c-twi-with-avr-data-transfer/" rel="alternate" type="text/html" />
<author>
<name>Conrad Gomes</name>
</author>
<category term="electronics"></category>
<category term="productization"></category>
<category term="i2c"></category>
<summary>

We now take a look at the TWI/I2C API responsible for data transfer. The header file
twi.h has the prototype. We&#8217;ll take a look at the arguments and
their description now:



TWI_RET_E twi_send_recv_buffer(
                           TWI_SEND_RECV_BUFFER_PARAMS_X *px_send_buffer_params,
                           TWI_MODE_E e_mode);



The first argument is a pointer to TWI_SEND_RECV_BUFFER_PARAMS_X defined as follows:



typedef struct _TWI_SEND_RECV_BUFFER_PARAMS_X
{
  ...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We now take a look at the TWI/I2C API responsible for data transfer. The header file
&lt;a href=&quot;https://github.com/zeuzoix/sardine/blob/master/twi.h&quot;&gt;twi.h&lt;/a&gt; has the prototype. We&amp;#8217;ll take a look at the arguments and
their description now:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;c&quot;&gt;TWI_RET_E twi_send_recv_buffer(
                           TWI_SEND_RECV_BUFFER_PARAMS_X *px_send_buffer_params,
                           TWI_MODE_E e_mode);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first argument is a pointer to TWI_SEND_RECV_BUFFER_PARAMS_X defined as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;typedef&lt;/span&gt; &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;struct&lt;/span&gt; _TWI_SEND_RECV_BUFFER_PARAMS_X
{
   uint8_t uc_dev_addr;
   uint8_t uc_dev_id;
   uint8_t *puc_reg_addr;
   uint32_t ui_reg_addr_sz;
   uint8_t *puc_data;
   uint32_t ui_data_sz;

}TWI_SEND_RECV_BUFFER_PARAMS_X;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Where&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;uc_dev_addr&lt;/strong&gt; is the higher nibble of the I2C slave device address&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;uc_dev_id&lt;/strong&gt; is the lower nibble of the I2C slave device address. It is used where the slave address can be configured&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;puc_reg_addr&lt;/strong&gt; is the pointer to the buffer holding the register address of the slave device.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ui_reg_addr_sz&lt;/strong&gt; is the size of the buffer with the register address.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;puc_data&lt;/strong&gt; is the pointer to the data buffer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ui_data_sz&lt;/strong&gt; is the size of the data buffer.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The second argument is an enumeration which indicates if a send or receive operation is to be done&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;typedef&lt;/span&gt; &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;enum&lt;/span&gt; _TWI_STATE_MODE_E
{
   eTWI_MODE_READ = &lt;span style=&quot;color:#00D&quot;&gt;0&lt;/span&gt;,
   eTWI_MODE_WRITE,
   eTWI_MODE_INVALID

}TWI_MODE_E;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://zeuzoix.github.io/techeuphoria/posts/2013/08/31/i2c-twi-with-avr-register-initialization/</id>
<title>I2C/TWI with AVR Register Initialization</title>
<updated>2014-11-05T08:40:50+05:30</updated>
<published>2013-08-31T00:00:00+00:00</published>
<link href="http://zeuzoix.github.io/techeuphoria/posts/2013/08/31/i2c-twi-with-avr-register-initialization/" rel="alternate" type="text/html" />
<author>
<name>Conrad Gomes</name>
</author>
<category term="electronics"></category>
<category term="protocols"></category>
<category term="i2c"></category>
<category term="twi"></category>
<category term="bus"></category>
<summary>

We learned about the different registers available in the Atmel AVR microcontroller to program the TWI interface. In this section we&#8217;ll go through the twi_init API and the initialization of the TWI interface.


The initialization code in the testbench.c initializes the
TWI/I2C library as follows:



x_twi_init_params.e_mode = eTWI_INIT_MODE_16_0000M_100K_1;
x_twi_init_params.pfn_debug = testbench_debug;
e_twi_ret = twi_init(&amp;x_twi_init_params);
if(eTWI_SUCCESS != e_twi_ret)
{
   i_ret = -1;
   goto LBL_INIT_IO_RET;
}



The API twi_init takes a structure variable x_twi_init_params of the type
shown below.  The definition is in twi.h:



typedef struct _TWI_INIT_PARAMS_X
{
   TWI_INIT_MODE_E e_mode;
   TWI_DEBUG_PFN pfn_debug;

}TWI_INIT_PARAMS_X;



The TWI interface can be initialized based on several modes each of which
is given...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We learned about the different registers available in the Atmel AVR microcontroller to program the TWI interface. In this section we&amp;#8217;ll go through the twi_init API and the initialization of the TWI interface.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The initialization code in the &lt;a href=&quot;https://github.com/zeuzoix/sardine/blob/master/testbench.c&quot;&gt;testbench.c&lt;/a&gt; initializes the
TWI/I2C library as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;c&quot;&gt;x_twi_init_params.e_mode = eTWI_INIT_MODE_16_0000M_100K_1;
x_twi_init_params.pfn_debug = testbench_debug;
e_twi_ret = twi_init(&amp;amp;x_twi_init_params);
&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt;(eTWI_SUCCESS != e_twi_ret)
{
   i_ret = -&lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;;
   &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;goto&lt;/span&gt; LBL_INIT_IO_RET;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The API &lt;em&gt;twi_init&lt;/em&gt; takes a structure variable x_twi_init_params of the type
shown below.  The definition is in &lt;a href=&quot;https://github.com/zeuzoix/sardine/blob/master/twi.h&quot;&gt;twi.h&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;typedef&lt;/span&gt; &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;struct&lt;/span&gt; _TWI_INIT_PARAMS_X
{
   TWI_INIT_MODE_E e_mode;
   TWI_DEBUG_PFN pfn_debug;

}TWI_INIT_PARAMS_X;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The TWI interface can be initialized based on several modes each of which
is given an identifier which signifies the CPU clock frequency, SCL clock
speed and the pre-scaler value. For instance in the enumeration definition
below &lt;em&gt;eTWI_INIT_MODE_16_0000M_100K_1&lt;/em&gt; is the mode for a 16.0000MHz
micro-controller, with the desired SCL clock frequency set at 100KHz and
the pre-scaler set to 1.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;typedef&lt;/span&gt; &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;enum&lt;/span&gt; _TWI_INIT_MODE_E
{
   eTWI_INIT_MODE_16_0000M_100K_1 = &lt;span style=&quot;color:#00D&quot;&gt;0&lt;/span&gt;,
   eTWI_INIT_MODE_16_0000M_400K_1,
   eTWI_INIT_MODE_16_0000M_100K_4,
   eTWI_INIT_MODE_16_0000M_400K_4,
   eTWI_INIT_MODE_INVALID

}TWI_INIT_MODE_E;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Internally if we take a look at the twi_init function defined in
&lt;a href=&quot;https://github.com/zeuzoix/sardine/blob/master/twi.c&quot;&gt;twi.c&lt;/a&gt; we see a look up table is employed to initialize the
5 registers TWBR, TWCR, TWSR, TWDR, TWAR. The look up table has the
following structure for each row:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;typedef&lt;/span&gt; &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;struct&lt;/span&gt; _TWI_INIT_REG_X
{
   TWI_INIT_MODE_E e_mode;
   uint8_t uc_twbr;
   uint8_t uc_twcr;
   uint8_t uc_twsr;
   uint8_t uc_twdr;
   uint8_t uc_twar;

}TWI_INIT_REG_X;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The lookup table is a global array gxa_init_reg and is defined as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;static&lt;/span&gt; TWI_INIT_REG_X gxa_init_reg[] =
{
   {
      eTWI_INIT_MODE_16_0000M_100K_1,
      &lt;span style=&quot;color:#02b&quot;&gt;0x48&lt;/span&gt;,                               &lt;span style=&quot;color:#777&quot;&gt;//0b01001000&lt;/span&gt;
      &lt;span style=&quot;color:#02b&quot;&gt;0x80&lt;/span&gt;,                               &lt;span style=&quot;color:#777&quot;&gt;//0b10000000&lt;/span&gt;
      &lt;span style=&quot;color:#02b&quot;&gt;0x00&lt;/span&gt;,                               &lt;span style=&quot;color:#777&quot;&gt;//0b00000000&lt;/span&gt;
      &lt;span style=&quot;color:#02b&quot;&gt;0x00&lt;/span&gt;,                               &lt;span style=&quot;color:#777&quot;&gt;//0b00000000&lt;/span&gt;
      &lt;span style=&quot;color:#02b&quot;&gt;0x00&lt;/span&gt;                                &lt;span style=&quot;color:#777&quot;&gt;//0b00000000&lt;/span&gt;
   }
};&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The code in twi_init cycles through the array gxa_init_reg until it finds
the correct mode and then initializes the 5 registers with the values associated
with the mode.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;for&lt;/span&gt;(uc_i = &lt;span style=&quot;color:#00D&quot;&gt;0&lt;/span&gt; ; uc_i &amp;lt; uc_size_arr ; uc_i++)
{
   &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt;(px_init_params-&amp;gt;e_mode == gxa_init_reg[uc_i].e_mode)
   {
      px_init_reg = &amp;amp;gxa_init_reg[uc_i];
      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;break&lt;/span&gt;;
   }
}

&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt;(&lt;span style=&quot;color:#069&quot;&gt;NULL&lt;/span&gt; == px_init_reg)
{
   &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt;(&lt;span style=&quot;color:#069&quot;&gt;NULL&lt;/span&gt; != px_init_params-&amp;gt;pfn_debug)
   {
      px_init_params-&amp;gt;pfn_debug(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Can't find correct mode&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
   }

   e_ret = eTWI_FAILURE;
   &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;goto&lt;/span&gt; LBL_TWI_INIT_RET;
}

TWBR = px_init_reg-&amp;gt;uc_twbr;
TWCR = px_init_reg-&amp;gt;uc_twcr;
TWSR = px_init_reg-&amp;gt;uc_twsr;
TWDR = px_init_reg-&amp;gt;uc_twdr;
TWAR = px_init_reg-&amp;gt;uc_twar;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the &lt;a href=&quot;http://zeuzoix.github.io/techeuphoria/posts/2013/09/07/i2c-twi-with-avr-data-transfer/&quot;&gt;next&lt;/a&gt; section we&amp;#8217;ll check out transmit
and receive functionality on the TWI/I2C bus with I2C/TWI with AVR Data Transfer.&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>http://zeuzoix.github.io/techeuphoria/posts/2013/08/29/i2c-twi-with-avr-register-descriptions/</id>
<title>I2C/TWI with AVR Register Descriptions</title>
<updated>2014-11-05T08:40:50+05:30</updated>
<published>2013-08-29T00:00:00+00:00</published>
<link href="http://zeuzoix.github.io/techeuphoria/posts/2013/08/29/i2c-twi-with-avr-register-descriptions/" rel="alternate" type="text/html" />
<author>
<name>Conrad Gomes</name>
</author>
<category term="electronics"></category>
<category term="protocols"></category>
<category term="i2c"></category>
<category term="twi"></category>
<category term="bus"></category>
<summary>



So you want to program the TWI/I2C interface of the AVR. Well you&#8217;ll need to read up about the registers used to control this interface. Though the microcontroller uses two pins SDA and SDC to drive the bus
there is a bunch of registers which are used to control the pins themselves.
Let&#8217;s take a look at them.




TWI Bit Rate Register (TWBR)


This register controls the SCL clock frequency which can either be 100Hz or
400Hz.











The equation to set the correct SCL clock frequency is:













CPUclockfreq is the CPU clock frequency(16MHz in my case).


SCLfreq is the desired SCL clock frequency(100Hz in my case).


TWBR is the...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So you want to program the TWI/I2C interface of the AVR. Well you&amp;#8217;ll need to read up about the registers used to control this interface. Though the microcontroller uses two pins SDA and SDC to drive the bus
there is a bunch of registers which are used to control the pins themselves.
Let&amp;#8217;s take a look at them.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;twi-bit-rate-register-twbr&quot;&gt;
&lt;a class=&quot;anchor&quot; href=&quot;#twi-bit-rate-register-twbr&quot;&gt;&lt;/a&gt;TWI Bit Rate Register (TWBR)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This register controls the SCL clock frequency which can either be 100Hz or
400Hz.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://zeuzoix.github.io/techeuphoria/images/TWI_TWBR.png&quot; alt=&quot;TWI TWBR&quot; width=&quot;640&quot; height=&quot;480&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The equation to set the correct SCL clock frequency is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: left&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://zeuzoix.github.io/techeuphoria/images/svg.latex.svg&quot; alt=&quot;svg.latex&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CPUclockfreq&lt;/strong&gt; is the CPU clock frequency(16MHz in my case).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SCLfreq&lt;/strong&gt; is the desired SCL clock frequency(100Hz in my case).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TWBR&lt;/strong&gt; is the value we store in the register.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TWPS&lt;/strong&gt; is the prescaler bits in the TWI status register TWSR which can take
values from 0 to 3(0 in my case).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;twi-control-register-twcr&quot;&gt;
&lt;a class=&quot;anchor&quot; href=&quot;#twi-control-register-twcr&quot;&gt;&lt;/a&gt;TWI Control Register (TWCR)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This register is used to control the operation of the TWI/I2C interface. Start
or stop a transaction and acknowledge the receipt of a data packet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://zeuzoix.github.io/techeuphoria/images/TWI_TWCR.png&quot; alt=&quot;TWI TWCR&quot; width=&quot;640&quot; height=&quot;480&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bit 7 - TWINT:&lt;/strong&gt; Set when the TWI has finished it&amp;#8217;s task. Also used to initiate
a transaction. This flag is normally cleared by writing a 1 to it. All other
operations to the TWDR and TWAR must be done before this is cleared.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bit 6 - TWEA:&lt;/strong&gt; Controls generation of the acknowledge bit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bit 5 - TWSTA:&lt;/strong&gt; Controls generation of a start bit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bit 4 - TWSTO:&lt;/strong&gt; Controls generation of a stop bit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bit 3 - TWWC:&lt;/strong&gt; This is a read only bit. It is set if you write TWDR when TWINT
is low. It is reset if you write TWDR when TWINT is high.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bit 2 - TWEN:&lt;/strong&gt; This bit enables the TWI/I2C interface&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bit 0 - TWIE:&lt;/strong&gt; This bit in conjunction with the I-bit in SREG enables the
interrupt mode&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;twi-status-register-twsr&quot;&gt;
&lt;a class=&quot;anchor&quot; href=&quot;#twi-status-register-twsr&quot;&gt;&lt;/a&gt;TWI Status Register (TWSR)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After every operation of the TWI interface this register is read to understand the
status of the bus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://zeuzoix.github.io/techeuphoria/images/TWI_TWSR.png&quot; alt=&quot;TWI TWSR&quot; width=&quot;640&quot; height=&quot;480&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bits 7:3 - TWS7:TWS3:&lt;/strong&gt; Status of the last TWI/I2C transaction&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bits 1:0 - TWPS1:TWPS0:&lt;/strong&gt; These are the pre-scaler bits used to modify the SCL frequency.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;twi-data-register-twdr&quot;&gt;
&lt;a class=&quot;anchor&quot; href=&quot;#twi-data-register-twdr&quot;&gt;&lt;/a&gt;TWI Data Register (TWDR)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This register is used to stores the bytes to be transmitted or the bytes received
on the TWI bus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://zeuzoix.github.io/techeuphoria/images/TWI_TWDR.png&quot; alt=&quot;TWI TWDR&quot; width=&quot;640&quot; height=&quot;480&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bits 7:0 - TWD7:TWD0:&lt;/strong&gt; Data byte to be written to the TWI bus or read from the TWI bus.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;twi-address-register-twar&quot;&gt;
&lt;a class=&quot;anchor&quot; href=&quot;#twi-address-register-twar&quot;&gt;&lt;/a&gt;TWI Address Register (TWAR)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This register is loaded with the 7 bit Slave address to which it must respond
to when programmed as a slave or when working in a multiple master mode. In
the multiple master mode the device will compete to be a master and if it senses
that it has lost the arbitration of the line it will have to turn into a slave
and listen for a possible message from another master device.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://zeuzoix.github.io/techeuphoria/images/TWI_TWAR.png&quot; alt=&quot;TWI TWAR&quot; width=&quot;640&quot; height=&quot;480&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bits 7:1 - TWA6: TWA0:&lt;/strong&gt; 7 bit slave address of the TWI interface.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bit 0 - TWGCE:&lt;/strong&gt; Indicates if the device will acknowledge a general call when
sent. A general call is an address to all the slaves connected on the bus. The
Slave address for a general call is usually all 0s.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the &lt;a href=&quot;http://zeuzoix.github.io/techeuphoria/posts/2013/08/31/i2c-twi-with-avr-register-initialization/&quot;&gt;next&lt;/a&gt; section I2C/TWI with AVR
Register Intialization we&amp;#8217;ll go through the initialization code for the TWI/I2C
interface and the values assigned to these registers.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
</feed>
