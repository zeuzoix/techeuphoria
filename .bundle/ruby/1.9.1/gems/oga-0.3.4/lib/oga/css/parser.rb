# This file is automatically generated by ruby-ll. Manually changing this file
# is not recommended as any changes will be lost the next time this parser is
# re-generated.
require 'll/setup'

module Oga
module CSS
##
# AST parser for CSS expressions.
#
# This parser does _not_ build a CSS specific AST, instead it directly produces
# an XPath AST. This removes the need to transform the AST or generate
# corresponding XPath expressions as a String.
#
# Similar to {Oga::XPath::Parser} this parser only takes String instances as
# input.
#
class Parser < LL::Driver
  CONFIG = LL::DriverConfig.new

  CONFIG.terminals = [
    :$EOF, # 0
    :T_IDENT, # 1
    :T_PIPE, # 2
    :T_LBRACK, # 3
    :T_RBRACK, # 4
    :T_COLON, # 5
    :T_SPACE, # 6
    :T_LPAREN, # 7
    :T_RPAREN, # 8
    :T_MINUS, # 9
    :T_EQ, # 10
    :T_SPACE_IN, # 11
    :T_STARTS_WITH, # 12
    :T_ENDS_WITH, # 13
    :T_IN, # 14
    :T_HYPHEN_IN, # 15
    :T_GREATER, # 16
    :T_TILDE, # 17
    :T_PLUS, # 18
    :T_NTH, # 19
    :T_INT, # 20
    :T_STRING, # 21
    :T_ODD, # 22
    :T_EVEN, # 23
    :T_DOT, # 24
    :T_HASH, # 25
  ].freeze

  CONFIG.rules = [
    [3, 0, 0, 1], # 0
    [3, 1, 2, 0], # 1
    [3, 2, 4, 29, 6, 0, 0, 3], # 2
    [3, 3, 0, 3, 1, 6], # 3
    [3, 4, 8, 30, 0, 4], # 4
    [3, 5, 8, 31, 0, 5], # 5
    [3, 6, 0, 10], # 6
    [3, 7, 0, 7], # 7
    [3, 8, 0, 6, 1, 16], # 8
    [3, 9, 0, 6, 1, 17], # 9
    [3, 10, 0, 6, 1, 18], # 10
    [3, 11, 0, 7], # 11
    [3, 12, 0, 5], # 12
    [3, 13, 0, 8], # 13
    [3, 14, 8, 32, 1, 1], # 14
    [3, 15, 1, 1, 1, 2], # 15
    [3, 16, 4, 33, 6, 0, 0, 11], # 16
    [3, 17, 0, 17], # 17
    [3, 18, 0, 18], # 18
    [3, 19, 0, 19], # 19
    [3, 20, 0, 12], # 20
    [3, 21, 1, 4, 0, 13, 1, 3], # 21
    [3, 22, 0, 15], # 22
    [3, 23, 0, 8], # 23
    [3, 24, 8, 34, 0, 14], # 24
    [3, 25, 1, 10], # 25
    [3, 26, 1, 11], # 26
    [3, 27, 1, 12], # 27
    [3, 28, 1, 13], # 28
    [3, 29, 1, 14], # 29
    [3, 30, 1, 15], # 30
    [3, 31, 1, 1, 1, 24], # 31
    [3, 32, 1, 1, 1, 25], # 32
    [3, 33, 8, 35, 0, 20], # 33
    [3, 34, 1, 1, 1, 5], # 34
    [3, 35, 1, 8, 0, 22, 1, 7], # 35
    [3, 36, 0, 27], # 36
    [3, 37, 0, 28], # 37
    [3, 38, 0, 25], # 38
    [3, 39, 0, 3], # 39
    [3, 40, 1, 21], # 40
    [3, 41, 1, 20], # 41
    [3, 42, 8, 36, 0, 26], # 42
    [3, 43, 8, 37, 0, 26, 1, 9], # 43
    [3, 44, 8, 39, 8, 38, 0, 24], # 44
    [3, 45, 1, 19], # 45
    [3, 46, 1, 22], # 46
    [3, 47, 1, 23], # 47
    [3, 48, 0, 2], # 48
    [3, 49, 0, 10], # 49
    [3, 50, 0, 10], # 50
    [3, 51, 0, 9], # 51
    [3, 52, 0, 11], # 52
    [3, 53, 0, 23, 0, 16], # 53
    [3, 54, 0, 21], # 54
    [3, 55, 0, 24], # 55
    [3, 56, 0, 24], # 56
    [3, 57, 0, 26], # 57
    [3, 58, 0, 24], # 58
  ].freeze

  CONFIG.table = [
    [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0], # 0
    [-1, 2, -1, 2, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, -1, -1, -1, -1, -1, 2, 2], # 1
    [-1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 2
    [-1, 4, -1, 6, -1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 5, 5, -1, -1, -1, -1, -1, 6, 6], # 3
    [-1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 4
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1], # 5
    [-1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, 12, 12, -1, -1, -1, -1, -1, -1, -1], # 6
    [-1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 7
    [-1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 8
    [-1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 9
    [-1, -1, -1, 16, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16], # 10
    [-1, -1, -1, 20, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, 18], # 11
    [-1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 12
    [-1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 13
    [-1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 14
    [-1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 15
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, 27, 28, 29, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 16
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, -1], # 17
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32], # 18
    [-1, -1, -1, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 19
    [-1, -1, -1, -1, -1, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 20
    [-1, -1, -1, -1, -1, -1, -1, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 21
    [-1, 39, -1, 39, -1, 39, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, 39, 39, 39, 38, 38, -1, 36, 37, 39, 39], # 22
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, -1, -1, -1, -1], # 23
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1], # 24
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, 44, -1, -1, -1, -1, -1], # 25
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, -1, -1, -1, -1, -1, -1], # 26
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1], # 27
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1], # 28
    [-1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 29
    [-1, -1, -1, 49, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, 49], # 30
    [-1, -1, -1, 50, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, 50], # 31
    [-1, -1, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 32
    [-1, -1, -1, 52, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 52], # 33
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 53, 53, 53, 53, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 34
    [-1, -1, -1, -1, -1, -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], # 35
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, -1, -1, -1, -1, -1], # 36
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1], # 37
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1, -1, -1], # 38
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, -1, -1, -1, -1, -1], # 39
  ].freeze

  CONFIG.actions = [
    [:_rule_0, 1], # 0
    [:_rule_1, 0], # 1
    [:_rule_2, 2], # 2
    [:_rule_3, 2], # 3
    [:_rule_4, 2], # 4
    [:_rule_5, 2], # 5
    [:_rule_6, 1], # 6
    [:_rule_7, 1], # 7
    [:_rule_8, 2], # 8
    [:_rule_9, 2], # 9
    [:_rule_10, 2], # 10
    [:_rule_11, 1], # 11
    [:_rule_12, 1], # 12
    [:_rule_13, 1], # 13
    [:_rule_14, 2], # 14
    [:_rule_15, 2], # 15
    [:_rule_16, 2], # 16
    [:_rule_17, 1], # 17
    [:_rule_18, 1], # 18
    [:_rule_19, 1], # 19
    [:_rule_20, 1], # 20
    [:_rule_21, 3], # 21
    [:_rule_22, 1], # 22
    [:_rule_23, 1], # 23
    [:_rule_24, 2], # 24
    [:_rule_25, 1], # 25
    [:_rule_26, 1], # 26
    [:_rule_27, 1], # 27
    [:_rule_28, 1], # 28
    [:_rule_29, 1], # 29
    [:_rule_30, 1], # 30
    [:_rule_31, 2], # 31
    [:_rule_32, 2], # 32
    [:_rule_33, 2], # 33
    [:_rule_34, 2], # 34
    [:_rule_35, 3], # 35
    [:_rule_36, 1], # 36
    [:_rule_37, 1], # 37
    [:_rule_38, 1], # 38
    [:_rule_39, 1], # 39
    [:_rule_40, 1], # 40
    [:_rule_41, 1], # 41
    [:_rule_42, 2], # 42
    [:_rule_43, 3], # 43
    [:_rule_44, 3], # 44
    [:_rule_45, 1], # 45
    [:_rule_46, 1], # 46
    [:_rule_47, 1], # 47
    [:_rule_48, 1], # 48
    [:_rule_49, 1], # 49
    [:_rule_50, 1], # 50
    [:_rule_51, 1], # 51
    [:_rule_52, 1], # 52
    [:_rule_53, 2], # 53
    [:_rule_54, 1], # 54
    [:_rule_55, 1], # 55
    [:_rule_56, 1], # 56
    [:_rule_57, 1], # 57
    [:_rule_58, 1], # 58
  ].freeze

  ##
  # @return [Oga::LRU]
  #
  CACHE = LRU.new

  ##
  # @param [String] data
  # @return [AST::Node]
  #
  def self.parse_with_cache(data)
    return CACHE.get_or_set(data) { new(data).parse }
  end

  ##
  # @param [String] data The input to parse.
  #
  def initialize(data)
    @lexer = Lexer.new(data)
  end

  ##
  # Resets the internal state of the parser.
  #
  def reset
    @current_element = nil
  end

  ##
  # @param [Symbol] type
  # @param [Array] children
  # @return [AST::Node]
  #
  def s(type, *children)
    return AST::Node.new(type, children)
  end

  ##
  # Yields the next token from the lexer.
  #
  # @yieldparam [Array]
  #
  def each_token
    @lexer.advance do |*args|
      yield args
    end

    yield [-1, -1]
  end

  ##
  # Returns the node test for the current element.
  #
  # @return [AST::Node]
  #
  def current_element
    return @current_element ||= s(:test, nil, '*')
  end

  ##
  # Parses the input and returns the corresponding AST.
  #
  # @example
  #  parser = Oga::CSS::Parser.new('foo.bar')
  #  ast    = parser.parse
  #
  # @return [AST::Node]
  #
  def parse
    reset

    return super
  end

  ##
  # Generates the AST for a node test.
  #
  # @param [String] namespace
  # @param [String] name
  # @return [AST::Node]
  #
  def on_test(namespace, name)
    @current_element = s(:test, namespace, name)

    return @current_element
  end

  ##
  # @param [String] name
  # @param [AST::Node] arg
  # @return [AST::Node]
  #
  def on_pseudo_class(name, arg = nil)
    handler = "on_pseudo_class_#{name.gsub('-', '_')}"

    return arg ? send(handler, arg) : send(handler)
  end

  ##
  # Generates the AST for the `root` pseudo class.
  #
  # @return [AST::Node]
  #
  def on_pseudo_class_root
    return s(:call, 'not', s(:axis, 'parent', s(:test, nil, '*')))
  end

  ##
  # Generates the AST for the `nth-child` pseudo class.
  #
  # @param [AST::Node] arg
  # @return [AST::Node]
  #
  def on_pseudo_class_nth_child(arg)
    return generate_nth_child('preceding-sibling', arg)
  end

  ##
  # Generates the AST for the `nth-last-child` pseudo class.
  #
  # @param [AST::Node] arg
  # @return [AST::Node]
  #
  def on_pseudo_class_nth_last_child(arg)
    return generate_nth_child('following-sibling', arg)
  end

  ##
  # Generates the AST for the `nth-of-type` pseudo class.
  #
  # @param [AST::Node] arg
  # @return [AST::Node]
  #
  def on_pseudo_class_nth_of_type(arg)
    return generate_nth_child('preceding-sibling', arg, current_element)
  end

  ##
  # Generates the AST for the `nth-last-of-type` pseudo class.
  #
  # @param [AST::Node] arg
  # @return [AST::Node]
  #
  def on_pseudo_class_nth_last_of_type(arg)
    return generate_nth_child('following-sibling', arg, current_element)
  end

  ##
  # Generates the AST for the `:first-child` selector.
  #
  # @return [AST::Node]
  #
  def on_pseudo_class_first_child
    return generate_no_siblings('preceding-sibling')
  end

  ##
  # Generates the AST for the `:last-child` selector.
  #
  # @return [AST::Node]
  #
  def on_pseudo_class_last_child
    return generate_no_siblings('following-sibling')
  end

  ##
  # Generates the AST for the `:first-of-type` selector.
  #
  # @return [AST::Node]
  #
  def on_pseudo_class_first_of_type
    return generate_no_siblings('preceding-sibling', current_element)
  end

  ##
  # Generates the AST for the `:last-of-type` selector.
  #
  # @return [AST::Node]
  #
  def on_pseudo_class_last_of_type
    return generate_no_siblings('following-sibling', current_element)
  end

  ##
  # Generates the AST for the `:only-child` selector.
  #
  # @return [AST::Node]
  #
  def on_pseudo_class_only_child
    return s(:and, on_pseudo_class_first_child, on_pseudo_class_last_child)
  end

  ##
  # Generates the AST for the `:only-of-type` selector.
  #
  # @return [AST::Node]
  #
  def on_pseudo_class_only_of_type
    return s(:and, on_pseudo_class_first_of_type, on_pseudo_class_last_of_type)
  end

  ##
  # Generates the AST for the `:empty` selector.
  #
  # @return [AST::Node]
  #
  def on_pseudo_class_empty
    return s(:call, 'not', s(:axis, 'child', s(:type_test, 'node')))
  end

  ##
  # Generates the AST for the `=` operator.
  #
  # @param [AST::Node] attr
  # @param [AST::Node] value
  # @return [AST::Node]
  #
  def on_op_eq(attr, value)
    return s(:eq, attr, value)
  end

  ##
  # Generates the AST for the `~=` operator.
  #
  # @param [AST::Node] attr
  # @param [AST::Node] value
  # @return [AST::Node]
  #
  def on_op_space_in(attr, value)
    return s(
      :call,
      'contains',
      s(:call, 'concat', s(:string, ' '), attr, s(:string, ' ')),
      s(:call, 'concat', s(:string, ' '), value, s(:string, ' '))
    )
  end

  ##
  # Generates the AST for the `^=` operator.
  #
  # @param [AST::Node] attr
  # @param [AST::Node] value
  # @return [AST::Node]
  #
  def on_op_starts_with(attr, value)
    return s(:call, 'starts-with', attr, value)
  end

  ##
  # Generates the AST for the `$=` operator.
  #
  # @param [AST::Node] attr
  # @param [AST::Node] value
  # @return [AST::Node]
  #
  def on_op_ends_with(attr, value)
    return s(
      :eq,
      s(
        :call,
        'substring',
        attr,
        s(
          :add,
          s(
            :sub,
            s(:call, 'string-length', attr),
            s(:call, 'string-length', value)
          ),
          s(:int, 1)
        ),
        s(:call, 'string-length', value)
      ),
      value
    )
  end

  ##
  # Generates the AST for the `*=` operator.
  #
  # @param [AST::Node] attr
  # @param [AST::Node] value
  # @return [AST::Node]
  #
  def on_op_in(attr, value)
    return s(:call, 'contains', attr, value)
  end

  ##
  # Generates the AST for the `|=` operator.
  #
  # @param [AST::Node] attr
  # @param [AST::Node] value
  # @return [AST::Node]
  #
  def on_op_hyphen_in(attr, value)
    return s(
      :or,
      s(:eq, attr, value),
      s(
        :call,
        'starts-with',
        attr,
        s(:call, 'concat', value, s(:string, '-'))
      )
    )
  end

  private

  ##
  # @param [String] count_axis
  # @param [AST::Node] arg
  # @param [AST::Node] count_test
  # @return [AST::Node]
  #
  def generate_nth_child(count_axis, arg, count_test = s(:test, nil, '*'))
    count_call = s(:call, 'count', s(:axis, count_axis, count_test))

   # literal 2, 4, etc
    if int_node?(arg)
      node = s(:eq, count_call, s(:int, arg.children[0] - 1))
    else
      step, offset = *arg
      before_count = s(:add, count_call, s(:int, 1))
      compare      = step_comparison(step)

      # 2n+2, 2n-4, etc
      if offset
        mod_val = step_modulo_value(step)
        node    = s(
          :and,
          s(compare, before_count, offset),
          s(:eq, s(:mod, s(:sub, before_count, offset), mod_val), s(:int, 0))
        )

      # 2n, n, -2n
      else
        node = s(:eq, s(:mod, before_count, step), s(:int, 0))
      end
    end

    return node
  end

  ##
  # @param [String] axis
  # @param [AST::Node] test
  # @return [AST::Node]
  #
  def generate_no_siblings(axis, test = s(:test, nil, '*'))
    return s(:eq, s(:call, 'count', s(:axis, axis, test)), s(:int, 0))
  end

  ##
  # @param [AST::Node] node
  # @return [TrueClass|FalseClass]
  #
  def int_node?(node)
    return node.type == :int
  end

  ##
  # @param [AST::Node] node
  # @return [TrueClass|FalseClass]
  #
  def non_positive_number?(node)
    return node.children[0] <= 0
  end

  ##
  # @param [AST::Node] node
  # @return [Symbol]
  #
  def step_comparison(node)
    return node.children[0] >= 0 ? :gte : :lte
  end

  ##
  # @param [AST::Node] step
  # @return [AST::Node]
  #
  def step_modulo_value(step)
    # -2n
    if step and non_positive_number?(step)
      mod_val = s(:int, -step.children[0])

    # 2n
    elsif step
      mod_val = step

    else
      mod_val = s(:int, 1)
    end

    return mod_val
  end

  def _rule_0(val)
    val[0]
  end

  def _rule_1(val)
     nil 
  end

  def _rule_2(val)
    
      # Single selector
      if val[1].empty?
        ret = val[0]

        if ret.is_a?(Array)
          ret = s(:path, *ret)
        end

      # Multiple selectors
      else
        steps = [val[0]]

        val[1].each do |step|
          # "+ foo" is broken up into two steps.
          if step.is_a?(Array)
            # Using Array#+ or Array#| would require allocating an extra Array
            step.each { |sub| steps << sub }
          else
            steps << step
          end
        end

        ret = s(:path, *steps)
      end

      ret
    
  end

  def _rule_3(val)
     val[1] 
  end

  def _rule_4(val)
    
      val[1] ? s(:predicate, val[0], val[1]) : val[0]
    
  end

  def _rule_5(val)
    
      val[1] ? s(:predicate, val[0], val[1]) : val[0]
    
  end

  def _rule_6(val)
    
      s(:predicate, s(:axis, 'descendant', on_test(nil, '*')), val[0])
    
  end

  def _rule_7(val)
     s(:axis, 'descendant', val[0]) 
  end

  def _rule_8(val)
    
      s(:axis, 'child', val[1])
    
  end

  def _rule_9(val)
    
      s(:axis, 'following-sibling', val[1])
    
  end

  def _rule_10(val)
    
      [
        s(
          :predicate,
          s(:axis, 'following-sibling', on_test(nil, '*')),
          s(:int, 1)
        ),
        s(:axis, 'self', val[1])
      ]
    
  end

  def _rule_11(val)
    val[0]
  end

  def _rule_12(val)
    val[0]
  end

  def _rule_13(val)
     on_test(*val[0]) 
  end

  def _rule_14(val)
     val[1] ? [val[0], val[1]] : [nil, val[0]] 
  end

  def _rule_15(val)
     val[1] 
  end

  def _rule_16(val)
    
      ret = val[0]

      val[1].each do |pred|
        ret = s(:and, ret, pred)
      end

      ret
    
  end

  def _rule_17(val)
    val[0]
  end

  def _rule_18(val)
    val[0]
  end

  def _rule_19(val)
    val[0]
  end

  def _rule_20(val)
    val[0]
  end

  def _rule_21(val)
     val[1] 
  end

  def _rule_22(val)
    val[0]
  end

  def _rule_23(val)
     s(:axis, 'attribute', on_test(*val[0])) 
  end

  def _rule_24(val)
    
      op_type = val[1] ? val[1][0] : nil

      case op_type
      # a="b"
      when :eq
        on_op_eq(val[0], val[1][1])

      # a~="b"
      when :space_in
        on_op_space_in(val[0], val[1][1])

      # a^="b"
      when :starts_with
        on_op_starts_with(val[0], val[1][1])

      # a$="b"
      when :ends_with
        on_op_ends_with(val[0], val[1][1])

      # a*="b"
      when :in
        on_op_in(val[0], val[1][1])

      # a|="b"
      when :hyphen_in
        on_op_hyphen_in(val[0], val[1][1])

      else
        val[0]
      end
    
  end

  def _rule_25(val)
     :eq 
  end

  def _rule_26(val)
     :space_in 
  end

  def _rule_27(val)
     :starts_with 
  end

  def _rule_28(val)
     :ends_with 
  end

  def _rule_29(val)
     :in 
  end

  def _rule_30(val)
     :hyphen_in 
  end

  def _rule_31(val)
    
      axis = s(:axis, 'attribute', s(:test, nil, 'class'))

      s(
        :call,
        'contains',
        s(:call, 'concat', s(:string, ' '), axis, s(:string, ' ')),
        s(:string, " #{val[1]} ")
      )
    
  end

  def _rule_32(val)
    
      s(
        :eq,
        s(:axis, 'attribute', s(:test, nil, 'id')),
        s(:string, val[1])
      )
    
  end

  def _rule_33(val)
     on_pseudo_class(val[0], val[1]) 
  end

  def _rule_34(val)
     val[1] 
  end

  def _rule_35(val)
     val[1] 
  end

  def _rule_36(val)
    val[0]
  end

  def _rule_37(val)
    val[0]
  end

  def _rule_38(val)
    val[0]
  end

  def _rule_39(val)
    val[0]
  end

  def _rule_40(val)
     s(:string, val[0]) 
  end

  def _rule_41(val)
     s(:int, val[0].to_i) 
  end

  def _rule_42(val)
    
      val[1] ? s(:nth, s(:int, 1), val[1]) : s(:nth, s(:int, 1))
    
  end

  def _rule_43(val)
    
      val[2] ? s(:nth, s(:int, -1), val[2]) : s(:nth, s(:int, 1))
    
  end

  def _rule_44(val)
    
      # 2n+1
      if val[1] and val[2]
        a = val[0]
        b = val[2]

        # 2n-1 gets turned into 2n+1
        if b.children[0] < 0
          b = s(:int, a.children[0] - (b.children[0] % a.children[0]))
        end

        s(:nth, a, b)

      # 2n
      elsif val[1]
        s(:nth, val[0])

      # 2
      else
        val[0]
      end
    
  end

  def _rule_45(val)
     :nth 
  end

  def _rule_46(val)
     s(:nth, s(:int, 2), s(:int, 1)) 
  end

  def _rule_47(val)
     s(:nth, s(:int, 2)) 
  end

  def _rule_48(val)
    val[0]
  end

  def _rule_49(val)
    val[0]
  end

  def _rule_50(val)
    val[0]
  end

  def _rule_51(val)
    val[0]
  end

  def _rule_52(val)
    val[0]
  end

  def _rule_53(val)
    val
  end

  def _rule_54(val)
    val[0]
  end

  def _rule_55(val)
    val[0]
  end

  def _rule_56(val)
    val[0]
  end

  def _rule_57(val)
    val[0]
  end

  def _rule_58(val)
    val[0]
  end
end
end
end
