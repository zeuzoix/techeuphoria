
# line 1 "lib/oga/xpath/lexer.rl"

# line 3 "lib/oga/xpath/lexer.rl"
module Oga
  module XPath
    ##
    # Lexer for turning XPath expressions into a set of tokens. Tokens are
    # returned as arrays with every array having two values:
    #
    # 1. The token type as a symbol
    # 2. The token value or nil if there is no value
    #
    # Basic usage of this lexer is as following:
    #
    #     lexer  = Oga::XPath::Lexer.new('//foo/bar')
    #     tokens = lexer.lex
    #
    # Alternatively you can stream tokens instead of returning them as a whole:
    #
    #     lexer = Oga::XPath::Lexer.new('//foo/bar')
    #
    #     lexer.advance do |type, value|
    #
    #     end
    #
    # Unlike the XML lexer the XPath lexer does not support IO instances, it can
    # only lex strings.
    #
    # ## Thread Safety
    #
    # This class keeps track of an internal state. As a result it's not safe to
    # share a single instance between multiple threads. However, you're free to
    # use separate instances per thread as there is no global (= class level)
    # shared state.
    #
    class Lexer
      
# line 40 "lib/oga/xpath/lexer.rb"
class << self
	attr_accessor :_xpath_lexer_trans_keys
	private :_xpath_lexer_trans_keys, :_xpath_lexer_trans_keys=
end
self._xpath_lexer_trans_keys = [
	0, 0, 32, 32, 32, 32, 
	110, 110, 100, 100, 32, 
	32, 105, 105, 118, 118, 
	32, 32, 111, 111, 100, 100, 
	32, 32, 114, 114, 32, 
	32, 61, 61, 34, 34, 
	42, 122, 39, 39, 43, 57, 
	48, 57, 58, 58, 41, 
	41, 9, 124, 42, 111, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 45, 122, 
	43, 57, 46, 57, 46, 57, 
	46, 46, 47, 47, 61, 
	61, 0, 0, 0, 0, 
	61, 61, 0, 0, 45, 122, 
	45, 122, 45, 122, 45, 
	122, 45, 122, 45, 122, 
	45, 122, 45, 122, 45, 122, 
	45, 122, 45, 122, 45, 
	122, 45, 122, 45, 122, 
	45, 122, 45, 122, 45, 122, 
	45, 122, 45, 122, 45, 
	122, 45, 122, 45, 122, 
	45, 122, 45, 122, 45, 122, 
	45, 122, 45, 122, 45, 
	122, 45, 122, 45, 122, 
	45, 122, 45, 122, 45, 122, 
	40, 122, 45, 122, 45, 
	122, 45, 122, 45, 122, 
	45, 122, 45, 122, 45, 122, 
	45, 122, 45, 122, 45, 
	122, 45, 122, 45, 122, 
	45, 122, 45, 122, 45, 122, 
	45, 122, 45, 122, 45, 
	122, 45, 122, 45, 122, 
	45, 122, 45, 122, 45, 122, 
	45, 122, 45, 122, 45, 
	122, 45, 122, 45, 122, 
	45, 122, 45, 122, 45, 122, 
	45, 122, 45, 122, 45, 
	122, 45, 122, 45, 122, 
	45, 122, 45, 122, 45, 122, 
	45, 122, 45, 122, 45, 
	122, 45, 122, 45, 122, 
	45, 122, 45, 122, 45, 122, 
	45, 122, 45, 122, 45, 
	122, 45, 122, 45, 122, 
	45, 122, 45, 122, 45, 122, 
	45, 122, 45, 122, 45, 
	122, 45, 122, 45, 122, 
	45, 122, 45, 122, 45, 122, 
	45, 122, 0, 0, 0
]

class << self
	attr_accessor :_xpath_lexer_key_spans
	private :_xpath_lexer_key_spans, :_xpath_lexer_key_spans=
end
self._xpath_lexer_key_spans = [
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	81, 1, 15, 10, 1, 1, 116, 70, 
	0, 0, 0, 0, 0, 0, 0, 78, 
	15, 12, 12, 1, 1, 1, 0, 0, 
	1, 0, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 83, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 0
]

class << self
	attr_accessor :_xpath_lexer_index_offsets
	private :_xpath_lexer_index_offsets, :_xpath_lexer_index_offsets=
end
self._xpath_lexer_index_offsets = [
	0, 0, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 20, 22, 24, 26, 28, 
	30, 112, 114, 130, 141, 143, 145, 262, 
	333, 334, 335, 336, 337, 338, 339, 340, 
	419, 435, 448, 461, 463, 465, 467, 468, 
	469, 471, 472, 551, 630, 709, 788, 867, 
	946, 1025, 1104, 1183, 1262, 1341, 1420, 1499, 
	1578, 1657, 1736, 1815, 1894, 1973, 2052, 2131, 
	2210, 2289, 2368, 2447, 2526, 2605, 2684, 2763, 
	2842, 2921, 3000, 3079, 3163, 3242, 3321, 3400, 
	3479, 3558, 3637, 3716, 3795, 3874, 3953, 4032, 
	4111, 4190, 4269, 4348, 4427, 4506, 4585, 4664, 
	4743, 4822, 4901, 4980, 5059, 5138, 5217, 5296, 
	5375, 5454, 5533, 5612, 5691, 5770, 5849, 5928, 
	6007, 6086, 6165, 6244, 6323, 6402, 6481, 6560, 
	6639, 6718, 6797, 6876, 6955, 7034, 7113, 7192, 
	7271, 7350, 7429, 7508, 7587, 7666, 7745, 7824, 
	7903, 7982, 8061, 8140, 8219
]

class << self
	attr_accessor :_xpath_lexer_indicies
	private :_xpath_lexer_indicies, :_xpath_lexer_indicies=
end
self._xpath_lexer_indicies = [
	1, 0, 2, 0, 3, 0, 4, 0, 
	5, 0, 6, 0, 7, 0, 8, 0, 
	9, 0, 10, 0, 11, 0, 12, 0, 
	13, 0, 14, 15, 17, 16, 18, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 15, 
	15, 15, 15, 19, 15, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 15, 
	17, 20, 22, 21, 22, 21, 21, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 21, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 21, 26, 25, 27, 
	25, 28, 28, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	29, 30, 16, 15, 31, 15, 15, 20, 
	32, 33, 34, 35, 36, 22, 37, 38, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 39, 15, 40, 41, 42, 15, 
	43, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 45, 15, 46, 15, 44, 
	15, 47, 44, 48, 49, 44, 50, 44, 
	44, 44, 44, 44, 44, 44, 51, 44, 
	52, 44, 44, 53, 54, 44, 44, 44, 
	44, 44, 44, 15, 55, 15, 57, 56, 
	56, 58, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 59, 56, 56, 
	60, 56, 56, 56, 56, 56, 56, 56, 
	56, 61, 56, 62, 56, 63, 64, 65, 
	66, 67, 68, 69, 19, 70, 70, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 70, 70, 70, 70, 70, 70, 70, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 70, 70, 70, 70, 19, 70, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 70, 72, 71, 72, 71, 71, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	73, 73, 71, 75, 74, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 74, 
	75, 76, 24, 24, 24, 24, 24, 24, 
	24, 24, 24, 24, 76, 43, 77, 43, 
	56, 79, 78, 80, 81, 83, 82, 84, 
	44, 85, 85, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 85, 85, 85, 
	85, 85, 85, 85, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 85, 85, 
	85, 85, 44, 85, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 85, 44, 
	85, 85, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 85, 85, 85, 85, 
	85, 85, 85, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 85, 85, 85, 
	85, 44, 85, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	86, 44, 44, 44, 44, 44, 87, 44, 
	44, 44, 44, 44, 44, 85, 44, 85, 
	85, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 85, 85, 85, 85, 85, 
	85, 85, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 85, 85, 85, 85, 
	44, 85, 44, 44, 88, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 85, 44, 85, 85, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 85, 85, 85, 85, 85, 85, 
	85, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 85, 85, 85, 85, 44, 
	85, 44, 44, 44, 44, 89, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 85, 44, 85, 85, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 85, 85, 85, 85, 85, 85, 85, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 85, 85, 85, 85, 44, 85, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 90, 44, 44, 44, 44, 44, 
	44, 44, 85, 44, 85, 85, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	85, 85, 85, 85, 85, 85, 85, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 85, 85, 85, 85, 44, 85, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 91, 44, 44, 44, 44, 44, 
	44, 85, 44, 85, 85, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 85, 
	85, 85, 85, 85, 85, 85, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	85, 85, 85, 85, 44, 85, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 92, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	85, 44, 85, 85, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 85, 85, 
	85, 85, 85, 85, 85, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 85, 
	85, 85, 85, 44, 85, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 93, 44, 
	44, 44, 44, 44, 44, 44, 44, 85, 
	94, 85, 85, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 95, 85, 85, 
	85, 85, 85, 85, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 85, 85, 
	85, 85, 44, 85, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 85, 44, 
	85, 85, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 85, 85, 85, 85, 
	85, 85, 85, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 85, 85, 85, 
	85, 44, 85, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 96, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 85, 44, 85, 
	85, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 85, 85, 85, 85, 85, 
	85, 85, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 85, 85, 85, 85, 
	44, 85, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 97, 44, 44, 44, 44, 
	44, 44, 44, 44, 85, 98, 85, 85, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 85, 85, 85, 85, 85, 85, 
	85, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 85, 85, 85, 85, 44, 
	85, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 85, 44, 85, 85, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 85, 85, 85, 85, 85, 85, 85, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 85, 85, 85, 85, 44, 85, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 53, 44, 44, 44, 44, 44, 
	44, 44, 85, 44, 85, 85, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	85, 85, 85, 85, 85, 85, 85, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 85, 85, 85, 85, 44, 85, 44, 
	44, 44, 44, 99, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 85, 44, 85, 85, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 85, 
	85, 85, 85, 85, 85, 85, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	85, 85, 85, 85, 44, 85, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 100, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	85, 44, 85, 85, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 85, 85, 
	85, 85, 85, 85, 85, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 85, 
	85, 85, 85, 44, 85, 44, 44, 44, 
	44, 44, 101, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 85, 
	44, 85, 85, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 95, 85, 85, 
	85, 85, 85, 85, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 85, 85, 
	85, 85, 44, 85, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 85, 44, 
	85, 85, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 85, 85, 85, 85, 
	85, 85, 85, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 85, 85, 85, 
	85, 44, 85, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 102, 44, 
	44, 44, 44, 44, 44, 85, 44, 85, 
	85, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 85, 85, 85, 85, 85, 
	85, 85, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 85, 85, 85, 85, 
	44, 85, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 103, 44, 44, 44, 44, 
	44, 44, 44, 44, 85, 44, 85, 85, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 85, 85, 85, 85, 85, 85, 
	85, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 85, 85, 85, 85, 44, 
	85, 44, 44, 44, 44, 44, 44, 44, 
	44, 104, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 85, 44, 85, 85, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 85, 85, 85, 85, 85, 85, 85, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 85, 85, 85, 85, 44, 85, 
	44, 105, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 85, 44, 85, 85, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	85, 85, 85, 85, 85, 85, 85, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 85, 85, 85, 85, 44, 85, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 106, 44, 44, 44, 44, 
	44, 85, 44, 85, 85, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 85, 
	85, 85, 85, 85, 85, 85, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	85, 85, 85, 85, 44, 85, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 107, 44, 44, 44, 44, 44, 44, 
	85, 44, 85, 85, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 85, 85, 
	85, 85, 85, 85, 85, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 85, 
	85, 85, 85, 44, 85, 44, 44, 44, 
	44, 101, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 85, 
	44, 85, 85, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 85, 85, 85, 
	85, 85, 85, 85, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 85, 85, 
	85, 85, 44, 85, 44, 44, 44, 44, 
	44, 44, 44, 108, 44, 44, 44, 44, 
	44, 44, 109, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 85, 44, 
	85, 85, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 85, 85, 85, 85, 
	85, 85, 85, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 85, 85, 85, 
	85, 44, 85, 44, 44, 44, 44, 44, 
	44, 44, 44, 110, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 85, 44, 85, 
	85, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 85, 85, 85, 85, 85, 
	85, 85, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 85, 85, 85, 85, 
	44, 85, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 111, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 85, 44, 85, 85, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 85, 85, 85, 85, 85, 85, 
	85, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 85, 85, 85, 85, 44, 
	85, 44, 44, 44, 101, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 85, 44, 85, 85, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 85, 85, 85, 85, 85, 85, 85, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 85, 85, 85, 85, 44, 85, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 112, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 85, 44, 85, 85, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	85, 85, 85, 85, 85, 85, 85, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 85, 85, 85, 85, 44, 85, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 113, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 85, 44, 85, 85, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 85, 
	85, 85, 85, 85, 85, 85, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	85, 85, 85, 85, 44, 85, 44, 44, 
	44, 44, 114, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	85, 44, 85, 85, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 85, 85, 
	85, 85, 85, 85, 85, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 85, 
	85, 85, 85, 44, 85, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 115, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 85, 
	44, 85, 85, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 85, 85, 85, 
	85, 85, 85, 85, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 85, 85, 
	85, 85, 44, 85, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 116, 
	44, 44, 44, 44, 44, 44, 85, 117, 
	85, 85, 85, 85, 44, 85, 85, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 85, 85, 85, 85, 85, 85, 85, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 85, 85, 85, 85, 44, 85, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 85, 44, 85, 85, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	85, 85, 85, 85, 85, 85, 85, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 85, 85, 85, 85, 44, 85, 44, 
	44, 44, 44, 118, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 85, 44, 85, 85, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 85, 
	85, 85, 85, 85, 85, 85, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	85, 85, 85, 85, 44, 85, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	119, 44, 44, 44, 44, 44, 44, 44, 
	85, 44, 85, 85, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 85, 85, 
	85, 85, 85, 85, 85, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 85, 
	85, 85, 85, 44, 85, 44, 44, 120, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 85, 
	44, 85, 85, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 85, 85, 85, 
	85, 85, 85, 85, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 85, 85, 
	85, 85, 44, 85, 44, 44, 44, 44, 
	121, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 85, 44, 
	85, 85, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 85, 85, 85, 85, 
	85, 85, 85, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 85, 85, 85, 
	85, 44, 85, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	122, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 85, 44, 85, 
	85, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 85, 85, 85, 85, 85, 
	85, 85, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 85, 85, 85, 85, 
	44, 85, 44, 44, 44, 123, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 85, 44, 85, 85, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 85, 85, 85, 85, 85, 85, 
	85, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 85, 85, 85, 85, 44, 
	85, 124, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 85, 44, 85, 85, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 85, 85, 85, 85, 85, 85, 85, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 85, 85, 85, 85, 44, 85, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 125, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 85, 44, 85, 85, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	85, 85, 85, 85, 85, 85, 85, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 85, 85, 85, 85, 44, 85, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 93, 44, 44, 44, 44, 44, 
	44, 85, 44, 85, 85, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 85, 
	85, 85, 85, 85, 85, 85, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	85, 85, 85, 85, 44, 85, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 126, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	85, 44, 85, 85, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 85, 85, 
	85, 85, 85, 85, 85, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 85, 
	85, 85, 85, 44, 85, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	127, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 85, 
	44, 85, 85, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 85, 85, 85, 
	85, 85, 85, 85, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 85, 85, 
	85, 85, 44, 85, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 128, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 85, 44, 
	85, 85, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 85, 85, 85, 85, 
	85, 85, 85, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 85, 85, 85, 
	85, 44, 85, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 129, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 85, 44, 85, 
	85, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 85, 85, 85, 85, 85, 
	85, 85, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 85, 85, 85, 85, 
	44, 85, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	130, 44, 44, 44, 85, 44, 85, 85, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 85, 85, 85, 85, 85, 85, 
	85, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 85, 85, 85, 85, 44, 
	85, 44, 44, 44, 44, 44, 44, 44, 
	44, 131, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 85, 44, 85, 85, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 85, 85, 85, 85, 85, 85, 85, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 85, 85, 85, 85, 44, 85, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 132, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 85, 44, 85, 85, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	85, 85, 85, 85, 85, 85, 85, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 85, 85, 85, 85, 44, 85, 44, 
	44, 44, 44, 44, 44, 133, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 85, 134, 85, 85, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 95, 
	85, 85, 85, 85, 85, 85, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	85, 85, 85, 85, 44, 85, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	85, 44, 85, 85, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 85, 85, 
	85, 85, 85, 85, 85, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 85, 
	85, 85, 85, 44, 85, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 135, 
	44, 44, 44, 44, 44, 44, 44, 85, 
	44, 85, 85, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 85, 85, 85, 
	85, 85, 85, 85, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 85, 85, 
	85, 85, 44, 85, 44, 44, 44, 44, 
	44, 44, 44, 44, 136, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 85, 44, 
	85, 85, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 85, 85, 85, 85, 
	85, 85, 85, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 85, 85, 85, 
	85, 44, 85, 44, 137, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 85, 44, 85, 
	85, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 85, 85, 85, 85, 85, 
	85, 85, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 85, 85, 85, 85, 
	44, 85, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 138, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 85, 44, 85, 85, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 85, 85, 85, 85, 85, 85, 
	85, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 85, 85, 85, 85, 44, 
	85, 44, 44, 44, 44, 44, 44, 44, 
	44, 139, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 85, 44, 85, 85, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 85, 85, 85, 85, 85, 85, 85, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 85, 85, 85, 85, 44, 85, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 140, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 85, 44, 85, 85, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	85, 85, 85, 85, 85, 85, 85, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 85, 85, 85, 85, 44, 85, 44, 
	44, 44, 44, 44, 44, 101, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 85, 44, 85, 85, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 85, 
	85, 85, 85, 85, 85, 85, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	85, 85, 85, 85, 44, 85, 141, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 142, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	85, 44, 85, 85, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 85, 85, 
	85, 85, 85, 85, 85, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 85, 
	85, 85, 85, 44, 85, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 143, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 85, 
	44, 85, 85, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 85, 85, 85, 
	85, 85, 85, 85, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 85, 85, 
	85, 85, 44, 85, 44, 44, 44, 44, 
	144, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 85, 44, 
	85, 85, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 85, 85, 85, 85, 
	85, 85, 85, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 85, 85, 85, 
	85, 44, 85, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 145, 44, 44, 
	44, 44, 44, 44, 44, 85, 44, 85, 
	85, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 85, 85, 85, 85, 85, 
	85, 85, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 85, 85, 85, 85, 
	44, 85, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 146, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 85, 44, 85, 85, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 85, 85, 85, 85, 85, 85, 
	85, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 85, 85, 85, 85, 44, 
	85, 147, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 85, 44, 85, 85, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 85, 85, 85, 85, 85, 85, 85, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 85, 85, 85, 85, 44, 85, 
	44, 44, 107, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 85, 44, 85, 85, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	85, 85, 85, 85, 85, 85, 85, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 85, 85, 85, 85, 44, 85, 44, 
	44, 44, 148, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 85, 44, 85, 85, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 85, 
	85, 85, 85, 85, 85, 85, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	85, 85, 85, 85, 44, 85, 44, 44, 
	44, 44, 116, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	85, 44, 85, 85, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 85, 85, 
	85, 85, 85, 85, 85, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 85, 
	85, 85, 85, 44, 85, 149, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 150, 44, 
	44, 44, 44, 44, 44, 44, 44, 85, 
	44, 85, 85, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 85, 85, 85, 
	85, 85, 85, 85, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 85, 85, 
	85, 85, 44, 85, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 151, 44, 44, 
	44, 44, 44, 44, 44, 44, 85, 44, 
	85, 85, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 85, 85, 85, 85, 
	85, 85, 85, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 85, 85, 85, 
	85, 44, 85, 44, 44, 44, 44, 152, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 85, 44, 85, 
	85, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 85, 85, 85, 85, 85, 
	85, 85, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 85, 85, 85, 85, 
	44, 85, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 153, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 85, 44, 85, 85, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 85, 85, 85, 85, 85, 85, 
	85, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 85, 85, 85, 85, 44, 
	85, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 101, 44, 44, 44, 
	44, 44, 44, 85, 44, 85, 85, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 85, 85, 85, 85, 85, 85, 85, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 85, 85, 85, 85, 44, 85, 
	44, 44, 44, 44, 154, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 155, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 85, 44, 85, 85, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	85, 85, 85, 85, 85, 85, 85, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 85, 85, 85, 85, 44, 85, 44, 
	44, 156, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 85, 44, 85, 85, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 85, 
	85, 85, 85, 85, 85, 85, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	85, 85, 85, 85, 44, 85, 44, 44, 
	44, 44, 157, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	85, 44, 85, 85, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 85, 85, 
	85, 85, 85, 85, 85, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 85, 
	85, 85, 85, 44, 85, 44, 44, 44, 
	130, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 85, 
	44, 85, 85, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 85, 85, 85, 
	85, 85, 85, 85, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 85, 85, 
	85, 85, 44, 85, 44, 44, 158, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 85, 44, 
	85, 85, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 85, 85, 85, 85, 
	85, 85, 85, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 85, 85, 85, 
	85, 44, 85, 44, 44, 44, 44, 159, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 85, 44, 85, 
	85, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 85, 85, 85, 85, 85, 
	85, 85, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 85, 85, 85, 85, 
	44, 85, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 160, 44, 44, 44, 
	44, 44, 44, 44, 85, 44, 85, 85, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 85, 85, 85, 85, 85, 85, 
	85, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 85, 85, 85, 85, 44, 
	85, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 161, 44, 44, 44, 44, 
	44, 44, 44, 85, 44, 85, 85, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 85, 85, 85, 85, 85, 85, 85, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 85, 85, 85, 85, 44, 85, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	162, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 85, 44, 85, 85, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	85, 85, 85, 85, 85, 85, 85, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 85, 85, 85, 85, 44, 85, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 163, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 85, 44, 85, 85, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 85, 
	85, 85, 85, 85, 85, 85, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	85, 85, 85, 85, 44, 85, 44, 44, 
	44, 44, 44, 44, 164, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	85, 165, 85, 85, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 85, 85, 
	85, 85, 85, 85, 85, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 85, 
	85, 85, 85, 44, 85, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 85, 
	44, 85, 85, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 85, 85, 85, 
	85, 85, 85, 85, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 85, 85, 
	85, 85, 44, 85, 44, 44, 44, 44, 
	44, 44, 44, 44, 166, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 85, 44, 
	85, 85, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 85, 85, 85, 85, 
	85, 85, 85, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 85, 85, 85, 
	85, 44, 85, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	167, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 85, 44, 85, 
	85, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 85, 85, 85, 85, 85, 
	85, 85, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 85, 85, 85, 85, 
	44, 85, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 168, 44, 44, 44, 
	44, 44, 44, 44, 85, 44, 85, 85, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 85, 85, 85, 85, 85, 85, 
	85, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 85, 85, 85, 85, 44, 
	85, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 169, 44, 44, 44, 
	44, 44, 44, 85, 44, 85, 85, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 85, 85, 85, 85, 85, 85, 85, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 85, 85, 85, 85, 44, 85, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 170, 44, 44, 44, 44, 44, 44, 
	44, 44, 85, 44, 85, 85, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	85, 85, 85, 85, 85, 85, 85, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 85, 85, 85, 85, 44, 85, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 171, 44, 44, 44, 44, 
	44, 85, 44, 85, 85, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 85, 
	85, 85, 85, 85, 85, 85, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	85, 85, 85, 85, 44, 85, 44, 44, 
	172, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	85, 44, 85, 85, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 85, 85, 
	85, 85, 85, 85, 85, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 85, 
	85, 85, 85, 44, 85, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	173, 44, 44, 44, 44, 44, 44, 85, 
	44, 85, 85, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 85, 85, 85, 
	85, 85, 85, 85, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 85, 85, 
	85, 85, 44, 85, 44, 44, 44, 44, 
	44, 44, 44, 44, 174, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 85, 44, 
	85, 85, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 85, 85, 85, 85, 
	85, 85, 85, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 85, 85, 85, 
	85, 44, 85, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 175, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 85, 44, 85, 
	85, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 85, 85, 85, 85, 85, 
	85, 85, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 85, 85, 85, 85, 
	44, 85, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 116, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 85, 44, 85, 85, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 85, 85, 85, 85, 85, 85, 
	85, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 85, 85, 85, 85, 44, 
	85, 44, 44, 44, 44, 176, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 85, 44, 85, 85, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 85, 85, 85, 85, 85, 85, 85, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 85, 85, 85, 85, 44, 85, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 115, 
	44, 44, 85, 177, 0
]

class << self
	attr_accessor :_xpath_lexer_trans_targs
	private :_xpath_lexer_trans_targs, :_xpath_lexer_trans_targs=
end
self._xpath_lexer_trans_targs = [
	22, 24, 25, 4, 5, 26, 7, 8, 
	27, 10, 11, 28, 13, 29, 30, 0, 
	15, 22, 22, 31, 17, 22, 18, 33, 
	34, 22, 22, 22, 22, 23, 14, 16, 
	22, 22, 22, 32, 22, 35, 36, 22, 
	37, 39, 40, 22, 42, 22, 22, 43, 
	66, 76, 85, 101, 110, 55, 138, 140, 
	22, 1, 2, 3, 6, 9, 12, 22, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	18, 33, 22, 19, 22, 22, 22, 38, 
	22, 22, 22, 41, 22, 22, 44, 59, 
	45, 46, 47, 48, 49, 50, 51, 20, 
	52, 53, 54, 56, 57, 58, 60, 61, 
	62, 63, 64, 65, 67, 70, 68, 69, 
	71, 72, 73, 74, 75, 21, 77, 78, 
	79, 80, 81, 82, 83, 84, 86, 87, 
	88, 89, 90, 91, 92, 93, 94, 95, 
	96, 97, 98, 99, 100, 102, 108, 103, 
	104, 105, 106, 107, 109, 111, 115, 112, 
	113, 114, 116, 119, 117, 118, 120, 121, 
	122, 123, 124, 125, 126, 127, 128, 129, 
	130, 131, 132, 133, 134, 135, 136, 137, 
	139, 22
]

class << self
	attr_accessor :_xpath_lexer_trans_actions
	private :_xpath_lexer_trans_actions, :_xpath_lexer_trans_actions=
end
self._xpath_lexer_trans_actions = [
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 2, 3, 0, 0, 4, 0, 5, 
	6, 7, 8, 9, 12, 13, 0, 0, 
	14, 15, 16, 17, 18, 0, 19, 20, 
	0, 0, 0, 21, 0, 22, 23, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	24, 0, 0, 0, 0, 0, 0, 25, 
	26, 27, 28, 29, 30, 31, 32, 33, 
	34, 35, 36, 0, 37, 38, 39, 0, 
	40, 41, 42, 0, 43, 44, 0, 0, 
	0, 0, 0, 0, 0, 13, 0, 0, 
	0, 0, 0, 0, 0, 13, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 13, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 45
]

class << self
	attr_accessor :_xpath_lexer_to_state_actions
	private :_xpath_lexer_to_state_actions, :_xpath_lexer_to_state_actions=
end
self._xpath_lexer_to_state_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 10, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
]

class << self
	attr_accessor :_xpath_lexer_from_state_actions
	private :_xpath_lexer_from_state_actions, :_xpath_lexer_from_state_actions=
end
self._xpath_lexer_from_state_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 11, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
]

class << self
	attr_accessor :_xpath_lexer_eof_trans
	private :_xpath_lexer_eof_trans, :_xpath_lexer_eof_trans=
end
self._xpath_lexer_eof_trans = [
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 0, 0, 
	0, 0, 22, 22, 26, 26, 0, 57, 
	64, 65, 66, 67, 68, 69, 70, 71, 
	72, 75, 77, 78, 57, 79, 81, 82, 
	83, 85, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 178
]

class << self
	attr_accessor :xpath_lexer_start
end
self.xpath_lexer_start = 22;
class << self
	attr_accessor :xpath_lexer_first_final
end
self.xpath_lexer_first_final = 22;
class << self
	attr_accessor :xpath_lexer_error
end
self.xpath_lexer_error = 0;

class << self
	attr_accessor :xpath_lexer_en_main
end
self.xpath_lexer_en_main = 22;


# line 37 "lib/oga/xpath/lexer.rl"

      # % fix highlight

      ##
      # Maps certain XPath axes written in their short form to their long form
      # equivalents.
      #
      # @return [Hash]
      #
      AXIS_MAPPING = {
        '@'  => 'attribute',
        '//' => 'descendant-or-self',
        '..' => 'parent',
        '.'  => 'self'
      }

      ##
      # Axes that require a separate `node()` call to be emitted.
      #
      # @return [Array]
      #
      AXIS_EMIT_NODE = %w{descendant-or-self parent self}

      ##
      # Axes that require an extra T_SLASH token to be emitted.
      #
      # @return [Array]
      #
      AXIS_EMIT_EXTRA_SLASH = %w{descendant-or-self}

      ##
      # @param [String] data The data to lex.
      #
      def initialize(data)
        @data = data
      end

      ##
      # Gathers all the tokens for the input and returns them as an Array.
      #
      # @see [#advance]
      # @return [Array]
      #
      def lex
        tokens = []

        advance do |type, value|
          tokens << [type, value]
        end

        return tokens
      end

      ##
      # Advances through the input and generates the corresponding tokens. Each
      # token is yielded to the supplied block.
      #
      # Each token is an Array in the following format:
      #
      #     [TYPE, VALUE]
      #
      # The type is a symbol, the value is either nil or a String.
      #
      # This method stores the supplied block in `@block` and resets it after
      # the lexer loop has finished.
      #
      # @see [#add_token]
      #
      def advance(&block)
        @block = block

        data  = @data # saves ivar lookups while lexing.
        ts    = nil
        te    = nil
        stack = []
        top   = 0
        cs    = self.class.xpath_lexer_start
        act   = 0
        eof   = @data.bytesize
        p     = 0
        pe    = eof

        _xpath_lexer_eof_trans          = self.class.send(:_xpath_lexer_eof_trans)
        _xpath_lexer_from_state_actions = self.class.send(:_xpath_lexer_from_state_actions)
        _xpath_lexer_index_offsets      = self.class.send(:_xpath_lexer_index_offsets)
        _xpath_lexer_indicies           = self.class.send(:_xpath_lexer_indicies)
        _xpath_lexer_key_spans          = self.class.send(:_xpath_lexer_key_spans)
        _xpath_lexer_to_state_actions   = self.class.send(:_xpath_lexer_to_state_actions)
        _xpath_lexer_trans_actions      = self.class.send(:_xpath_lexer_trans_actions)
        _xpath_lexer_trans_keys         = self.class.send(:_xpath_lexer_trans_keys)
        _xpath_lexer_trans_targs        = self.class.send(:_xpath_lexer_trans_targs)

        
# line 1434 "lib/oga/xpath/lexer.rb"
begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	case _xpath_lexer_from_state_actions[cs] 
	when 11 then
# line 1 "NONE"
		begin
ts = p
		end
# line 1462 "lib/oga/xpath/lexer.rb"
	end
	_keys = cs << 1
	_inds = _xpath_lexer_index_offsets[cs]
	_slen = _xpath_lexer_key_spans[cs]
	_wide = ( (data.getbyte(p) || 0))
	_trans = if (   _slen > 0 && 
			_xpath_lexer_trans_keys[_keys] <= _wide && 
			_wide <= _xpath_lexer_trans_keys[_keys + 1] 
		    ) then
			_xpath_lexer_indicies[ _inds + _wide - _xpath_lexer_trans_keys[_keys] ] 
		 else 
			_xpath_lexer_indicies[ _inds + _slen ]
		 end
	end
	if _goto_level <= _eof_trans
	cs = _xpath_lexer_trans_targs[_trans]
	if _xpath_lexer_trans_actions[_trans] != 0
	case _xpath_lexer_trans_actions[_trans]
	when 19 then
# line 184 "lib/oga/xpath/lexer.rl"
		begin
 add_token(:T_SLASH) 		end
	when 34 then
# line 296 "lib/oga/xpath/lexer.rl"
		begin
 add_token(:T_ADD) 		end
	when 13 then
# line 1 "NONE"
		begin
te = p+1
		end
	when 12 then
# line 368 "lib/oga/xpath/lexer.rl"
		begin
te = p+1
		end
	when 9 then
# line 349 "lib/oga/xpath/lexer.rl"
		begin
te = p+1
 begin 
          emit(:T_TYPE_TEST, ts, te - 2)
         end
		end
	when 3 then
# line 362 "lib/oga/xpath/lexer.rl"
		begin
te = p+1
 begin 
          emit(:T_VAR, ts + 1, te)
         end
		end
	when 2 then
# line 238 "lib/oga/xpath/lexer.rl"
		begin
te = p+1
 begin 
          emit(:T_STRING, ts + 1, te - 1)
         end
		end
	when 8 then
# line 260 "lib/oga/xpath/lexer.rl"
		begin
te = p+1
 begin 
          emit(:T_AXIS, ts, te - 2)
         end
		end
	when 21 then
# line 272 "lib/oga/xpath/lexer.rl"
		begin
te = p+1
 begin 
          value = AXIS_MAPPING[slice_input(ts, te)]

          add_token(:T_AXIS, value)

          # Short axes that use node() as their default, implicit test. This is
          # added on lexer level to make it easier to handle these cases on
          # parser/evaluator level.
          if AXIS_EMIT_NODE.include?(value)
            add_token(:T_TYPE_TEST, 'node')

            if AXIS_EMIT_EXTRA_SLASH.include?(value) and te != eof
              add_token(:T_SLASH)
            end
          end
         end
		end
	when 16 then
# line 199 "lib/oga/xpath/lexer.rl"
		begin
te = p+1
 begin 
          emit(:T_IDENT, ts, te)
         end
		end
	when 24 then
# line 368 "lib/oga/xpath/lexer.rl"
		begin
te = p
p = p - 1;		end
	when 32 then
# line 362 "lib/oga/xpath/lexer.rl"
		begin
te = p
p = p - 1; begin 
          emit(:T_VAR, ts + 1, te)
         end
		end
	when 36 then
# line 213 "lib/oga/xpath/lexer.rl"
		begin
te = p
p = p - 1; begin 
          value = slice_input(ts, te).to_i

          add_token(:T_INT, value)
         end
		end
	when 37 then
# line 219 "lib/oga/xpath/lexer.rl"
		begin
te = p
p = p - 1; begin 
          value = slice_input(ts, te).to_f

          add_token(:T_FLOAT, value)
         end
		end
	when 38 then
# line 272 "lib/oga/xpath/lexer.rl"
		begin
te = p
p = p - 1; begin 
          value = AXIS_MAPPING[slice_input(ts, te)]

          add_token(:T_AXIS, value)

          # Short axes that use node() as their default, implicit test. This is
          # added on lexer level to make it easier to handle these cases on
          # parser/evaluator level.
          if AXIS_EMIT_NODE.include?(value)
            add_token(:T_TYPE_TEST, 'node')

            if AXIS_EMIT_EXTRA_SLASH.include?(value) and te != eof
              add_token(:T_SLASH)
            end
          end
         end
		end
	when 44 then
# line 199 "lib/oga/xpath/lexer.rl"
		begin
te = p
p = p - 1; begin 
          emit(:T_IDENT, ts, te)
         end
		end
	when 1 then
# line 368 "lib/oga/xpath/lexer.rl"
		begin
 begin p = ((te))-1; end
		end
	when 7 then
# line 199 "lib/oga/xpath/lexer.rl"
		begin
 begin p = ((te))-1; end
 begin 
          emit(:T_IDENT, ts, te)
         end
		end
	when 4 then
# line 1 "NONE"
		begin
	case act
	when 0 then
	begin	begin
		cs = 0
		_goto_level = _again
		next
	end
end
	when 6 then
	begin begin p = ((te))-1; end

          value = slice_input(ts, te).to_i

          add_token(:T_INT, value)
        end
	when 7 then
	begin begin p = ((te))-1; end

          value = slice_input(ts, te).to_f

          add_token(:T_FLOAT, value)
        end
	else
	begin begin p = ((te))-1; end
end
end 
			end
	when 14 then
# line 185 "lib/oga/xpath/lexer.rl"
		begin
 add_token(:T_LPAREN) 		end
# line 368 "lib/oga/xpath/lexer.rl"
		begin
te = p+1
		end
	when 15 then
# line 186 "lib/oga/xpath/lexer.rl"
		begin
 add_token(:T_RPAREN) 		end
# line 368 "lib/oga/xpath/lexer.rl"
		begin
te = p+1
		end
	when 18 then
# line 187 "lib/oga/xpath/lexer.rl"
		begin
 add_token(:T_COMMA) 		end
# line 368 "lib/oga/xpath/lexer.rl"
		begin
te = p+1
		end
	when 20 then
# line 188 "lib/oga/xpath/lexer.rl"
		begin
 add_token(:T_COLON) 		end
# line 368 "lib/oga/xpath/lexer.rl"
		begin
te = p+1
		end
	when 22 then
# line 189 "lib/oga/xpath/lexer.rl"
		begin
 add_token(:T_LBRACK) 		end
# line 368 "lib/oga/xpath/lexer.rl"
		begin
te = p+1
		end
	when 23 then
# line 190 "lib/oga/xpath/lexer.rl"
		begin
 add_token(:T_RBRACK) 		end
# line 368 "lib/oga/xpath/lexer.rl"
		begin
te = p+1
		end
	when 45 then
# line 295 "lib/oga/xpath/lexer.rl"
		begin
 add_token(:T_PIPE) 		end
# line 367 "lib/oga/xpath/lexer.rl"
		begin
te = p
p = p - 1;		end
	when 33 then
# line 296 "lib/oga/xpath/lexer.rl"
		begin
 add_token(:T_ADD) 		end
# line 367 "lib/oga/xpath/lexer.rl"
		begin
te = p
p = p - 1;		end
	when 41 then
# line 297 "lib/oga/xpath/lexer.rl"
		begin
 add_token(:T_EQ) 		end
# line 367 "lib/oga/xpath/lexer.rl"
		begin
te = p
p = p - 1;		end
	when 31 then
# line 298 "lib/oga/xpath/lexer.rl"
		begin
 add_token(:T_NEQ) 		end
# line 367 "lib/oga/xpath/lexer.rl"
		begin
te = p
p = p - 1;		end
	when 39 then
# line 299 "lib/oga/xpath/lexer.rl"
		begin
 add_token(:T_LT) 		end
# line 367 "lib/oga/xpath/lexer.rl"
		begin
te = p
p = p - 1;		end
	when 42 then
# line 300 "lib/oga/xpath/lexer.rl"
		begin
 add_token(:T_GT) 		end
# line 367 "lib/oga/xpath/lexer.rl"
		begin
te = p
p = p - 1;		end
	when 40 then
# line 301 "lib/oga/xpath/lexer.rl"
		begin
 add_token(:T_LTE) 		end
# line 367 "lib/oga/xpath/lexer.rl"
		begin
te = p
p = p - 1;		end
	when 43 then
# line 302 "lib/oga/xpath/lexer.rl"
		begin
 add_token(:T_GTE) 		end
# line 367 "lib/oga/xpath/lexer.rl"
		begin
te = p
p = p - 1;		end
	when 27 then
# line 312 "lib/oga/xpath/lexer.rl"
		begin
 add_token(:T_AND) 		end
# line 367 "lib/oga/xpath/lexer.rl"
		begin
te = p
p = p - 1;		end
	when 30 then
# line 313 "lib/oga/xpath/lexer.rl"
		begin
 add_token(:T_OR) 		end
# line 367 "lib/oga/xpath/lexer.rl"
		begin
te = p
p = p - 1;		end
	when 28 then
# line 314 "lib/oga/xpath/lexer.rl"
		begin
 add_token(:T_DIV) 		end
# line 367 "lib/oga/xpath/lexer.rl"
		begin
te = p
p = p - 1;		end
	when 29 then
# line 315 "lib/oga/xpath/lexer.rl"
		begin
 add_token(:T_MOD) 		end
# line 367 "lib/oga/xpath/lexer.rl"
		begin
te = p
p = p - 1;		end
	when 25 then
# line 316 "lib/oga/xpath/lexer.rl"
		begin
 add_token(:T_MUL) 		end
# line 367 "lib/oga/xpath/lexer.rl"
		begin
te = p
p = p - 1;		end
	when 26 then
# line 317 "lib/oga/xpath/lexer.rl"
		begin
 add_token(:T_SUB) 		end
# line 367 "lib/oga/xpath/lexer.rl"
		begin
te = p
p = p - 1;		end
	when 17 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 367 "lib/oga/xpath/lexer.rl"
		begin
act = 1;		end
	when 5 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 213 "lib/oga/xpath/lexer.rl"
		begin
act = 6;		end
	when 6 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 219 "lib/oga/xpath/lexer.rl"
		begin
act = 7;		end
	when 35 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 296 "lib/oga/xpath/lexer.rl"
		begin
 add_token(:T_ADD) 		end
# line 213 "lib/oga/xpath/lexer.rl"
		begin
act = 6;		end
# line 1860 "lib/oga/xpath/lexer.rb"
	end
	end
	end
	if _goto_level <= _again
	case _xpath_lexer_to_state_actions[cs] 
	when 10 then
# line 1 "NONE"
		begin
ts = nil;		end
# line 1 "NONE"
		begin
act = 0
		end
# line 1874 "lib/oga/xpath/lexer.rb"
	end

	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	if _xpath_lexer_eof_trans[cs] > 0
		_trans = _xpath_lexer_eof_trans[cs] - 1;
		_goto_level = _eof_trans
		next;
	end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

# line 130 "lib/oga/xpath/lexer.rl"

        # % fix highlight
      ensure
        @block = nil
      end

      private

      ##
      # Emits a token of which the value is based on the supplied start/stop
      # position.
      #
      # @param [Symbol] type The token type.
      # @param [Fixnum] start
      # @param [Fixnum] stop
      #
      # @see [#text]
      # @see [#add_token]
      #
      def emit(type, start, stop)
        value = slice_input(start, stop)

        add_token(type, value)
      end

      ##
      # Returns the text between the specified start and stop position.
      #
      # @param [Fixnum] start
      # @param [Fixnum] stop
      # @return [String]
      #
      def slice_input(start, stop)
        return @data.byteslice(start, stop - start)
      end

      ##
      # Yields a new token to the supplied block.
      #
      # @param [Symbol] type The token type.
      # @param [String] value The token value.
      #
      # @yieldparam [Symbol] type
      # @yieldparam [String|NilClass] value
      #
      def add_token(type, value = nil)
        @block.call(type, value)
      end

      
# line 379 "lib/oga/xpath/lexer.rl"

    end # Lexer
  end # XPath
end # Oga
